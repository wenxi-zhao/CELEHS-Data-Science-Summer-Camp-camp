{
  "version": 3,
  "sources": ["../../../../micromark-util-symbol/lib/codes.js", "../../../../micromark-util-symbol/lib/constants.js", "../../../../micromark-util-symbol/lib/types.js", "../../../../micromark-util-symbol/lib/values.js", "../../../../micromark-util-character/dev/index.js"],
  "sourcesContent": ["/**\r\n * Character codes.\r\n *\r\n * This module is compiled away!\r\n *\r\n * micromark works based on character codes.\r\n * This module contains constants for the ASCII block and the replacement\r\n * character.\r\n * A couple of them are handled in a special way, such as the line endings\r\n * (CR, LF, and CR+LF, commonly known as end-of-line: EOLs), the tab (horizontal\r\n * tab) and its expansion based on what column it’s at (virtual space),\r\n * and the end-of-file (eof) character.\r\n * As values are preprocessed before handling them, the actual characters LF,\r\n * CR, HT, and NUL (which is present as the replacement character), are\r\n * guaranteed to not exist.\r\n *\r\n * Unicode basic latin block.\r\n */\r\nexport const codes = /** @type {const} */ ({\r\n  carriageReturn: -5,\r\n  lineFeed: -4,\r\n  carriageReturnLineFeed: -3,\r\n  horizontalTab: -2,\r\n  virtualSpace: -1,\r\n  eof: null,\r\n  nul: 0,\r\n  soh: 1,\r\n  stx: 2,\r\n  etx: 3,\r\n  eot: 4,\r\n  enq: 5,\r\n  ack: 6,\r\n  bel: 7,\r\n  bs: 8,\r\n  ht: 9, // `\\t`\r\n  lf: 10, // `\\n`\r\n  vt: 11, // `\\v`\r\n  ff: 12, // `\\f`\r\n  cr: 13, // `\\r`\r\n  so: 14,\r\n  si: 15,\r\n  dle: 16,\r\n  dc1: 17,\r\n  dc2: 18,\r\n  dc3: 19,\r\n  dc4: 20,\r\n  nak: 21,\r\n  syn: 22,\r\n  etb: 23,\r\n  can: 24,\r\n  em: 25,\r\n  sub: 26,\r\n  esc: 27,\r\n  fs: 28,\r\n  gs: 29,\r\n  rs: 30,\r\n  us: 31,\r\n  space: 32,\r\n  exclamationMark: 33, // `!`\r\n  quotationMark: 34, // `\"`\r\n  numberSign: 35, // `#`\r\n  dollarSign: 36, // `$`\r\n  percentSign: 37, // `%`\r\n  ampersand: 38, // `&`\r\n  apostrophe: 39, // `'`\r\n  leftParenthesis: 40, // `(`\r\n  rightParenthesis: 41, // `)`\r\n  asterisk: 42, // `*`\r\n  plusSign: 43, // `+`\r\n  comma: 44, // `,`\r\n  dash: 45, // `-`\r\n  dot: 46, // `.`\r\n  slash: 47, // `/`\r\n  digit0: 48, // `0`\r\n  digit1: 49, // `1`\r\n  digit2: 50, // `2`\r\n  digit3: 51, // `3`\r\n  digit4: 52, // `4`\r\n  digit5: 53, // `5`\r\n  digit6: 54, // `6`\r\n  digit7: 55, // `7`\r\n  digit8: 56, // `8`\r\n  digit9: 57, // `9`\r\n  colon: 58, // `:`\r\n  semicolon: 59, // `;`\r\n  lessThan: 60, // `<`\r\n  equalsTo: 61, // `=`\r\n  greaterThan: 62, // `>`\r\n  questionMark: 63, // `?`\r\n  atSign: 64, // `@`\r\n  uppercaseA: 65, // `A`\r\n  uppercaseB: 66, // `B`\r\n  uppercaseC: 67, // `C`\r\n  uppercaseD: 68, // `D`\r\n  uppercaseE: 69, // `E`\r\n  uppercaseF: 70, // `F`\r\n  uppercaseG: 71, // `G`\r\n  uppercaseH: 72, // `H`\r\n  uppercaseI: 73, // `I`\r\n  uppercaseJ: 74, // `J`\r\n  uppercaseK: 75, // `K`\r\n  uppercaseL: 76, // `L`\r\n  uppercaseM: 77, // `M`\r\n  uppercaseN: 78, // `N`\r\n  uppercaseO: 79, // `O`\r\n  uppercaseP: 80, // `P`\r\n  uppercaseQ: 81, // `Q`\r\n  uppercaseR: 82, // `R`\r\n  uppercaseS: 83, // `S`\r\n  uppercaseT: 84, // `T`\r\n  uppercaseU: 85, // `U`\r\n  uppercaseV: 86, // `V`\r\n  uppercaseW: 87, // `W`\r\n  uppercaseX: 88, // `X`\r\n  uppercaseY: 89, // `Y`\r\n  uppercaseZ: 90, // `Z`\r\n  leftSquareBracket: 91, // `[`\r\n  backslash: 92, // `\\`\r\n  rightSquareBracket: 93, // `]`\r\n  caret: 94, // `^`\r\n  underscore: 95, // `_`\r\n  graveAccent: 96, // `` ` ``\r\n  lowercaseA: 97, // `a`\r\n  lowercaseB: 98, // `b`\r\n  lowercaseC: 99, // `c`\r\n  lowercaseD: 100, // `d`\r\n  lowercaseE: 101, // `e`\r\n  lowercaseF: 102, // `f`\r\n  lowercaseG: 103, // `g`\r\n  lowercaseH: 104, // `h`\r\n  lowercaseI: 105, // `i`\r\n  lowercaseJ: 106, // `j`\r\n  lowercaseK: 107, // `k`\r\n  lowercaseL: 108, // `l`\r\n  lowercaseM: 109, // `m`\r\n  lowercaseN: 110, // `n`\r\n  lowercaseO: 111, // `o`\r\n  lowercaseP: 112, // `p`\r\n  lowercaseQ: 113, // `q`\r\n  lowercaseR: 114, // `r`\r\n  lowercaseS: 115, // `s`\r\n  lowercaseT: 116, // `t`\r\n  lowercaseU: 117, // `u`\r\n  lowercaseV: 118, // `v`\r\n  lowercaseW: 119, // `w`\r\n  lowercaseX: 120, // `x`\r\n  lowercaseY: 121, // `y`\r\n  lowercaseZ: 122, // `z`\r\n  leftCurlyBrace: 123, // `{`\r\n  verticalBar: 124, // `|`\r\n  rightCurlyBrace: 125, // `}`\r\n  tilde: 126, // `~`\r\n  del: 127,\r\n  // Unicode Specials block.\r\n  byteOrderMarker: 65279,\r\n  // Unicode Specials block.\r\n  replacementCharacter: 65533 // `�`\r\n})\r\n", "/**\r\n * This module is compiled away!\r\n *\r\n * Parsing markdown comes with a couple of constants, such as minimum or maximum\r\n * sizes of certain sequences.\r\n * Additionally, there are a couple symbols used inside micromark.\r\n * These are all defined here, but compiled away by scripts.\r\n */\r\nexport const constants = /** @type {const} */ ({\r\n  attentionSideBefore: 1, // Symbol to mark an attention sequence as before content: `*a`\r\n  attentionSideAfter: 2, // Symbol to mark an attention sequence as after content: `a*`\r\n  atxHeadingOpeningFenceSizeMax: 6, // 6 number signs is fine, 7 isn’t.\r\n  autolinkDomainSizeMax: 63, // 63 characters is fine, 64 is too many.\r\n  autolinkSchemeSizeMax: 32, // 32 characters is fine, 33 is too many.\r\n  cdataOpeningString: 'CDATA[', // And preceded by `<![`.\r\n  characterGroupWhitespace: 1, // Symbol used to indicate a character is whitespace\r\n  characterGroupPunctuation: 2, // Symbol used to indicate a character is punctuation\r\n  characterReferenceDecimalSizeMax: 7, // `&#9999999;`.\r\n  characterReferenceHexadecimalSizeMax: 6, // `&#xff9999;`.\r\n  characterReferenceNamedSizeMax: 31, // `&CounterClockwiseContourIntegral;`.\r\n  codeFencedSequenceSizeMin: 3, // At least 3 ticks or tildes are needed.\r\n  contentTypeDocument: 'document',\r\n  contentTypeFlow: 'flow',\r\n  contentTypeContent: 'content',\r\n  contentTypeString: 'string',\r\n  contentTypeText: 'text',\r\n  hardBreakPrefixSizeMin: 2, // At least 2 trailing spaces are needed.\r\n  htmlRaw: 1, // Symbol for `<script>`\r\n  htmlComment: 2, // Symbol for `<!---->`\r\n  htmlInstruction: 3, // Symbol for `<?php?>`\r\n  htmlDeclaration: 4, // Symbol for `<!doctype>`\r\n  htmlCdata: 5, // Symbol for `<![CDATA[]]>`\r\n  htmlBasic: 6, // Symbol for `<div`\r\n  htmlComplete: 7, // Symbol for `<x>`\r\n  htmlRawSizeMax: 8, // Length of `textarea`.\r\n  linkResourceDestinationBalanceMax: 32, // See: <https://spec.commonmark.org/0.30/#link-destination>, <https://github.com/remarkjs/react-markdown/issues/658#issuecomment-984345577>\r\n  linkReferenceSizeMax: 999, // See: <https://spec.commonmark.org/0.30/#link-label>\r\n  listItemValueSizeMax: 10, // See: <https://spec.commonmark.org/0.30/#ordered-list-marker>\r\n  numericBaseDecimal: 10,\r\n  numericBaseHexadecimal: 0x10,\r\n  tabSize: 4, // Tabs have a hard-coded size of 4, per CommonMark.\r\n  thematicBreakMarkerCountMin: 3, // At least 3 asterisks, dashes, or underscores are needed.\r\n  v8MaxSafeChunkSize: 10000 // V8 (and potentially others) have problems injecting giant arrays into other arrays, hence we operate in chunks.\r\n})\r\n", "/**\r\n * This module is compiled away!\r\n *\r\n * Here is the list of all types of tokens exposed by micromark, with a short\r\n * explanation of what they include and where they are found.\r\n * In picking names, generally, the rule is to be as explicit as possible\r\n * instead of reusing names.\r\n * For example, there is a `definitionDestination` and a `resourceDestination`,\r\n * instead of one shared name.\r\n */\r\n\r\n// Note: when changing the next record, you must also change `TokenTypeMap`\r\n// in `micromark-util-types/index.d.ts`.\r\nexport const types = /** @type {const} */ ({\r\n  // Generic type for data, such as in a title, a destination, etc.\r\n  data: 'data',\r\n\r\n  // Generic type for syntactic whitespace (tabs, virtual spaces, spaces).\r\n  // Such as, between a fenced code fence and an info string.\r\n  whitespace: 'whitespace',\r\n\r\n  // Generic type for line endings (line feed, carriage return, carriage return +\r\n  // line feed).\r\n  lineEnding: 'lineEnding',\r\n\r\n  // A line ending, but ending a blank line.\r\n  lineEndingBlank: 'lineEndingBlank',\r\n\r\n  // Generic type for whitespace (tabs, virtual spaces, spaces) at the start of a\r\n  // line.\r\n  linePrefix: 'linePrefix',\r\n\r\n  // Generic type for whitespace (tabs, virtual spaces, spaces) at the end of a\r\n  // line.\r\n  lineSuffix: 'lineSuffix',\r\n\r\n  // Whole ATX heading:\r\n  //\r\n  // ```markdown\r\n  // #\r\n  // ## Alpha\r\n  // ### Bravo ###\r\n  // ```\r\n  //\r\n  // Includes `atxHeadingSequence`, `whitespace`, `atxHeadingText`.\r\n  atxHeading: 'atxHeading',\r\n\r\n  // Sequence of number signs in an ATX heading (`###`).\r\n  atxHeadingSequence: 'atxHeadingSequence',\r\n\r\n  // Content in an ATX heading (`alpha`).\r\n  // Includes text.\r\n  atxHeadingText: 'atxHeadingText',\r\n\r\n  // Whole autolink (`<https://example.com>` or `<admin@example.com>`)\r\n  // Includes `autolinkMarker` and `autolinkProtocol` or `autolinkEmail`.\r\n  autolink: 'autolink',\r\n\r\n  // Email autolink w/o markers (`admin@example.com`)\r\n  autolinkEmail: 'autolinkEmail',\r\n\r\n  // Marker around an `autolinkProtocol` or `autolinkEmail` (`<` or `>`).\r\n  autolinkMarker: 'autolinkMarker',\r\n\r\n  // Protocol autolink w/o markers (`https://example.com`)\r\n  autolinkProtocol: 'autolinkProtocol',\r\n\r\n  // A whole character escape (`\\-`).\r\n  // Includes `escapeMarker` and `characterEscapeValue`.\r\n  characterEscape: 'characterEscape',\r\n\r\n  // The escaped character (`-`).\r\n  characterEscapeValue: 'characterEscapeValue',\r\n\r\n  // A whole character reference (`&amp;`, `&#8800;`, or `&#x1D306;`).\r\n  // Includes `characterReferenceMarker`, an optional\r\n  // `characterReferenceMarkerNumeric`, in which case an optional\r\n  // `characterReferenceMarkerHexadecimal`, and a `characterReferenceValue`.\r\n  characterReference: 'characterReference',\r\n\r\n  // The start or end marker (`&` or `;`).\r\n  characterReferenceMarker: 'characterReferenceMarker',\r\n\r\n  // Mark reference as numeric (`#`).\r\n  characterReferenceMarkerNumeric: 'characterReferenceMarkerNumeric',\r\n\r\n  // Mark reference as numeric (`x` or `X`).\r\n  characterReferenceMarkerHexadecimal: 'characterReferenceMarkerHexadecimal',\r\n\r\n  // Value of character reference w/o markers (`amp`, `8800`, or `1D306`).\r\n  characterReferenceValue: 'characterReferenceValue',\r\n\r\n  // Whole fenced code:\r\n  //\r\n  // ````markdown\r\n  // ```js\r\n  // alert(1)\r\n  // ```\r\n  // ````\r\n  codeFenced: 'codeFenced',\r\n\r\n  // A fenced code fence, including whitespace, sequence, info, and meta\r\n  // (` ```js `).\r\n  codeFencedFence: 'codeFencedFence',\r\n\r\n  // Sequence of grave accent or tilde characters (` ``` `) in a fence.\r\n  codeFencedFenceSequence: 'codeFencedFenceSequence',\r\n\r\n  // Info word (`js`) in a fence.\r\n  // Includes string.\r\n  codeFencedFenceInfo: 'codeFencedFenceInfo',\r\n\r\n  // Meta words (`highlight=\"1\"`) in a fence.\r\n  // Includes string.\r\n  codeFencedFenceMeta: 'codeFencedFenceMeta',\r\n\r\n  // A line of code.\r\n  codeFlowValue: 'codeFlowValue',\r\n\r\n  // Whole indented code:\r\n  //\r\n  // ```markdown\r\n  //     alert(1)\r\n  // ```\r\n  //\r\n  // Includes `lineEnding`, `linePrefix`, and `codeFlowValue`.\r\n  codeIndented: 'codeIndented',\r\n\r\n  // A text code (``` `alpha` ```).\r\n  // Includes `codeTextSequence`, `codeTextData`, `lineEnding`, and can include\r\n  // `codeTextPadding`.\r\n  codeText: 'codeText',\r\n\r\n  codeTextData: 'codeTextData',\r\n\r\n  // A space or line ending right after or before a tick.\r\n  codeTextPadding: 'codeTextPadding',\r\n\r\n  // A text code fence (` `` `).\r\n  codeTextSequence: 'codeTextSequence',\r\n\r\n  // Whole content:\r\n  //\r\n  // ```markdown\r\n  // [a]: b\r\n  // c\r\n  // =\r\n  // d\r\n  // ```\r\n  //\r\n  // Includes `paragraph` and `definition`.\r\n  content: 'content',\r\n  // Whole definition:\r\n  //\r\n  // ```markdown\r\n  // [micromark]: https://github.com/micromark/micromark\r\n  // ```\r\n  //\r\n  // Includes `definitionLabel`, `definitionMarker`, `whitespace`,\r\n  // `definitionDestination`, and optionally `lineEnding` and `definitionTitle`.\r\n  definition: 'definition',\r\n\r\n  // Destination of a definition (`https://github.com/micromark/micromark` or\r\n  // `<https://github.com/micromark/micromark>`).\r\n  // Includes `definitionDestinationLiteral` or `definitionDestinationRaw`.\r\n  definitionDestination: 'definitionDestination',\r\n\r\n  // Enclosed destination of a definition\r\n  // (`<https://github.com/micromark/micromark>`).\r\n  // Includes `definitionDestinationLiteralMarker` and optionally\r\n  // `definitionDestinationString`.\r\n  definitionDestinationLiteral: 'definitionDestinationLiteral',\r\n\r\n  // Markers of an enclosed definition destination (`<` or `>`).\r\n  definitionDestinationLiteralMarker: 'definitionDestinationLiteralMarker',\r\n\r\n  // Unenclosed destination of a definition\r\n  // (`https://github.com/micromark/micromark`).\r\n  // Includes `definitionDestinationString`.\r\n  definitionDestinationRaw: 'definitionDestinationRaw',\r\n\r\n  // Text in an destination (`https://github.com/micromark/micromark`).\r\n  // Includes string.\r\n  definitionDestinationString: 'definitionDestinationString',\r\n\r\n  // Label of a definition (`[micromark]`).\r\n  // Includes `definitionLabelMarker` and `definitionLabelString`.\r\n  definitionLabel: 'definitionLabel',\r\n\r\n  // Markers of a definition label (`[` or `]`).\r\n  definitionLabelMarker: 'definitionLabelMarker',\r\n\r\n  // Value of a definition label (`micromark`).\r\n  // Includes string.\r\n  definitionLabelString: 'definitionLabelString',\r\n\r\n  // Marker between a label and a destination (`:`).\r\n  definitionMarker: 'definitionMarker',\r\n\r\n  // Title of a definition (`\"x\"`, `'y'`, or `(z)`).\r\n  // Includes `definitionTitleMarker` and optionally `definitionTitleString`.\r\n  definitionTitle: 'definitionTitle',\r\n\r\n  // Marker around a title of a definition (`\"`, `'`, `(`, or `)`).\r\n  definitionTitleMarker: 'definitionTitleMarker',\r\n\r\n  // Data without markers in a title (`z`).\r\n  // Includes string.\r\n  definitionTitleString: 'definitionTitleString',\r\n\r\n  // Emphasis (`*alpha*`).\r\n  // Includes `emphasisSequence` and `emphasisText`.\r\n  emphasis: 'emphasis',\r\n\r\n  // Sequence of emphasis markers (`*` or `_`).\r\n  emphasisSequence: 'emphasisSequence',\r\n\r\n  // Emphasis text (`alpha`).\r\n  // Includes text.\r\n  emphasisText: 'emphasisText',\r\n\r\n  // The character escape marker (`\\`).\r\n  escapeMarker: 'escapeMarker',\r\n\r\n  // A hard break created with a backslash (`\\\\n`).\r\n  // Note: does not include the line ending.\r\n  hardBreakEscape: 'hardBreakEscape',\r\n\r\n  // A hard break created with trailing spaces (`  \\n`).\r\n  // Does not include the line ending.\r\n  hardBreakTrailing: 'hardBreakTrailing',\r\n\r\n  // Flow HTML:\r\n  //\r\n  // ```markdown\r\n  // <div\r\n  // ```\r\n  //\r\n  // Inlcudes `lineEnding`, `htmlFlowData`.\r\n  htmlFlow: 'htmlFlow',\r\n\r\n  htmlFlowData: 'htmlFlowData',\r\n\r\n  // HTML in text (the tag in `a <i> b`).\r\n  // Includes `lineEnding`, `htmlTextData`.\r\n  htmlText: 'htmlText',\r\n\r\n  htmlTextData: 'htmlTextData',\r\n\r\n  // Whole image (`![alpha](bravo)`, `![alpha][bravo]`, `![alpha][]`, or\r\n  // `![alpha]`).\r\n  // Includes `label` and an optional `resource` or `reference`.\r\n  image: 'image',\r\n\r\n  // Whole link label (`[*alpha*]`).\r\n  // Includes `labelLink` or `labelImage`, `labelText`, and `labelEnd`.\r\n  label: 'label',\r\n\r\n  // Text in an label (`*alpha*`).\r\n  // Includes text.\r\n  labelText: 'labelText',\r\n\r\n  // Start a link label (`[`).\r\n  // Includes a `labelMarker`.\r\n  labelLink: 'labelLink',\r\n\r\n  // Start an image label (`![`).\r\n  // Includes `labelImageMarker` and `labelMarker`.\r\n  labelImage: 'labelImage',\r\n\r\n  // Marker of a label (`[` or `]`).\r\n  labelMarker: 'labelMarker',\r\n\r\n  // Marker to start an image (`!`).\r\n  labelImageMarker: 'labelImageMarker',\r\n\r\n  // End a label (`]`).\r\n  // Includes `labelMarker`.\r\n  labelEnd: 'labelEnd',\r\n\r\n  // Whole link (`[alpha](bravo)`, `[alpha][bravo]`, `[alpha][]`, or `[alpha]`).\r\n  // Includes `label` and an optional `resource` or `reference`.\r\n  link: 'link',\r\n\r\n  // Whole paragraph:\r\n  //\r\n  // ```markdown\r\n  // alpha\r\n  // bravo.\r\n  // ```\r\n  //\r\n  // Includes text.\r\n  paragraph: 'paragraph',\r\n\r\n  // A reference (`[alpha]` or `[]`).\r\n  // Includes `referenceMarker` and an optional `referenceString`.\r\n  reference: 'reference',\r\n\r\n  // A reference marker (`[` or `]`).\r\n  referenceMarker: 'referenceMarker',\r\n\r\n  // Reference text (`alpha`).\r\n  // Includes string.\r\n  referenceString: 'referenceString',\r\n\r\n  // A resource (`(https://example.com \"alpha\")`).\r\n  // Includes `resourceMarker`, an optional `resourceDestination` with an optional\r\n  // `whitespace` and `resourceTitle`.\r\n  resource: 'resource',\r\n\r\n  // A resource destination (`https://example.com`).\r\n  // Includes `resourceDestinationLiteral` or `resourceDestinationRaw`.\r\n  resourceDestination: 'resourceDestination',\r\n\r\n  // A literal resource destination (`<https://example.com>`).\r\n  // Includes `resourceDestinationLiteralMarker` and optionally\r\n  // `resourceDestinationString`.\r\n  resourceDestinationLiteral: 'resourceDestinationLiteral',\r\n\r\n  // A resource destination marker (`<` or `>`).\r\n  resourceDestinationLiteralMarker: 'resourceDestinationLiteralMarker',\r\n\r\n  // A raw resource destination (`https://example.com`).\r\n  // Includes `resourceDestinationString`.\r\n  resourceDestinationRaw: 'resourceDestinationRaw',\r\n\r\n  // Resource destination text (`https://example.com`).\r\n  // Includes string.\r\n  resourceDestinationString: 'resourceDestinationString',\r\n\r\n  // A resource marker (`(` or `)`).\r\n  resourceMarker: 'resourceMarker',\r\n\r\n  // A resource title (`\"alpha\"`, `'alpha'`, or `(alpha)`).\r\n  // Includes `resourceTitleMarker` and optionally `resourceTitleString`.\r\n  resourceTitle: 'resourceTitle',\r\n\r\n  // A resource title marker (`\"`, `'`, `(`, or `)`).\r\n  resourceTitleMarker: 'resourceTitleMarker',\r\n\r\n  // Resource destination title (`alpha`).\r\n  // Includes string.\r\n  resourceTitleString: 'resourceTitleString',\r\n\r\n  // Whole setext heading:\r\n  //\r\n  // ```markdown\r\n  // alpha\r\n  // bravo\r\n  // =====\r\n  // ```\r\n  //\r\n  // Includes `setextHeadingText`, `lineEnding`, `linePrefix`, and\r\n  // `setextHeadingLine`.\r\n  setextHeading: 'setextHeading',\r\n\r\n  // Content in a setext heading (`alpha\\nbravo`).\r\n  // Includes text.\r\n  setextHeadingText: 'setextHeadingText',\r\n\r\n  // Underline in a setext heading, including whitespace suffix (`==`).\r\n  // Includes `setextHeadingLineSequence`.\r\n  setextHeadingLine: 'setextHeadingLine',\r\n\r\n  // Sequence of equals or dash characters in underline in a setext heading (`-`).\r\n  setextHeadingLineSequence: 'setextHeadingLineSequence',\r\n\r\n  // Strong (`**alpha**`).\r\n  // Includes `strongSequence` and `strongText`.\r\n  strong: 'strong',\r\n\r\n  // Sequence of strong markers (`**` or `__`).\r\n  strongSequence: 'strongSequence',\r\n\r\n  // Strong text (`alpha`).\r\n  // Includes text.\r\n  strongText: 'strongText',\r\n\r\n  // Whole thematic break:\r\n  //\r\n  // ```markdown\r\n  // * * *\r\n  // ```\r\n  //\r\n  // Includes `thematicBreakSequence` and `whitespace`.\r\n  thematicBreak: 'thematicBreak',\r\n\r\n  // A sequence of one or more thematic break markers (`***`).\r\n  thematicBreakSequence: 'thematicBreakSequence',\r\n\r\n  // Whole block quote:\r\n  //\r\n  // ```markdown\r\n  // > a\r\n  // >\r\n  // > b\r\n  // ```\r\n  //\r\n  // Includes `blockQuotePrefix` and flow.\r\n  blockQuote: 'blockQuote',\r\n  // The `>` or `> ` of a block quote.\r\n  blockQuotePrefix: 'blockQuotePrefix',\r\n  // The `>` of a block quote prefix.\r\n  blockQuoteMarker: 'blockQuoteMarker',\r\n  // The optional ` ` of a block quote prefix.\r\n  blockQuotePrefixWhitespace: 'blockQuotePrefixWhitespace',\r\n\r\n  // Whole unordered list:\r\n  //\r\n  // ```markdown\r\n  // - a\r\n  //   b\r\n  // ```\r\n  //\r\n  // Includes `listItemPrefix`, flow, and optionally  `listItemIndent` on further\r\n  // lines.\r\n  listOrdered: 'listOrdered',\r\n\r\n  // Whole ordered list:\r\n  //\r\n  // ```markdown\r\n  // 1. a\r\n  //    b\r\n  // ```\r\n  //\r\n  // Includes `listItemPrefix`, flow, and optionally  `listItemIndent` on further\r\n  // lines.\r\n  listUnordered: 'listUnordered',\r\n\r\n  // The indent of further list item lines.\r\n  listItemIndent: 'listItemIndent',\r\n\r\n  // A marker, as in, `*`, `+`, `-`, `.`, or `)`.\r\n  listItemMarker: 'listItemMarker',\r\n\r\n  // The thing that starts a list item, such as `1. `.\r\n  // Includes `listItemValue` if ordered, `listItemMarker`, and\r\n  // `listItemPrefixWhitespace` (unless followed by a line ending).\r\n  listItemPrefix: 'listItemPrefix',\r\n\r\n  // The whitespace after a marker.\r\n  listItemPrefixWhitespace: 'listItemPrefixWhitespace',\r\n\r\n  // The numerical value of an ordered item.\r\n  listItemValue: 'listItemValue',\r\n\r\n  // Internal types used for subtokenizers, compiled away\r\n  chunkDocument: 'chunkDocument',\r\n  chunkContent: 'chunkContent',\r\n  chunkFlow: 'chunkFlow',\r\n  chunkText: 'chunkText',\r\n  chunkString: 'chunkString'\r\n})\r\n", "/**\r\n * This module is compiled away!\r\n *\r\n * While micromark works based on character codes, this module includes the\r\n * string versions of ’em.\r\n * The C0 block, except for LF, CR, HT, and w/ the replacement character added,\r\n * are available here.\r\n */\r\nexport const values = /** @type {const} */ ({\r\n  ht: '\\t',\r\n  lf: '\\n',\r\n  cr: '\\r',\r\n  space: ' ',\r\n  exclamationMark: '!',\r\n  quotationMark: '\"',\r\n  numberSign: '#',\r\n  dollarSign: '$',\r\n  percentSign: '%',\r\n  ampersand: '&',\r\n  apostrophe: \"'\",\r\n  leftParenthesis: '(',\r\n  rightParenthesis: ')',\r\n  asterisk: '*',\r\n  plusSign: '+',\r\n  comma: ',',\r\n  dash: '-',\r\n  dot: '.',\r\n  slash: '/',\r\n  digit0: '0',\r\n  digit1: '1',\r\n  digit2: '2',\r\n  digit3: '3',\r\n  digit4: '4',\r\n  digit5: '5',\r\n  digit6: '6',\r\n  digit7: '7',\r\n  digit8: '8',\r\n  digit9: '9',\r\n  colon: ':',\r\n  semicolon: ';',\r\n  lessThan: '<',\r\n  equalsTo: '=',\r\n  greaterThan: '>',\r\n  questionMark: '?',\r\n  atSign: '@',\r\n  uppercaseA: 'A',\r\n  uppercaseB: 'B',\r\n  uppercaseC: 'C',\r\n  uppercaseD: 'D',\r\n  uppercaseE: 'E',\r\n  uppercaseF: 'F',\r\n  uppercaseG: 'G',\r\n  uppercaseH: 'H',\r\n  uppercaseI: 'I',\r\n  uppercaseJ: 'J',\r\n  uppercaseK: 'K',\r\n  uppercaseL: 'L',\r\n  uppercaseM: 'M',\r\n  uppercaseN: 'N',\r\n  uppercaseO: 'O',\r\n  uppercaseP: 'P',\r\n  uppercaseQ: 'Q',\r\n  uppercaseR: 'R',\r\n  uppercaseS: 'S',\r\n  uppercaseT: 'T',\r\n  uppercaseU: 'U',\r\n  uppercaseV: 'V',\r\n  uppercaseW: 'W',\r\n  uppercaseX: 'X',\r\n  uppercaseY: 'Y',\r\n  uppercaseZ: 'Z',\r\n  leftSquareBracket: '[',\r\n  backslash: '\\\\',\r\n  rightSquareBracket: ']',\r\n  caret: '^',\r\n  underscore: '_',\r\n  graveAccent: '`',\r\n  lowercaseA: 'a',\r\n  lowercaseB: 'b',\r\n  lowercaseC: 'c',\r\n  lowercaseD: 'd',\r\n  lowercaseE: 'e',\r\n  lowercaseF: 'f',\r\n  lowercaseG: 'g',\r\n  lowercaseH: 'h',\r\n  lowercaseI: 'i',\r\n  lowercaseJ: 'j',\r\n  lowercaseK: 'k',\r\n  lowercaseL: 'l',\r\n  lowercaseM: 'm',\r\n  lowercaseN: 'n',\r\n  lowercaseO: 'o',\r\n  lowercaseP: 'p',\r\n  lowercaseQ: 'q',\r\n  lowercaseR: 'r',\r\n  lowercaseS: 's',\r\n  lowercaseT: 't',\r\n  lowercaseU: 'u',\r\n  lowercaseV: 'v',\r\n  lowercaseW: 'w',\r\n  lowercaseX: 'x',\r\n  lowercaseY: 'y',\r\n  lowercaseZ: 'z',\r\n  leftCurlyBrace: '{',\r\n  verticalBar: '|',\r\n  rightCurlyBrace: '}',\r\n  tilde: '~',\r\n  replacementCharacter: '�'\r\n})\r\n", "/**\r\n * @typedef {import('micromark-util-types').Code} Code\r\n */\r\n\r\nimport {codes} from 'micromark-util-symbol'\r\n\r\n/**\r\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\r\n * case insensitive).\r\n *\r\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\r\n *\r\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\r\n * to U+005A (`Z`).\r\n *\r\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\r\n * to U+007A (`z`).\r\n *\r\n * @param code\r\n *   Code.\r\n * @returns {boolean}\r\n *   Whether it matches.\r\n */\r\nexport const asciiAlpha = regexCheck(/[A-Za-z]/)\r\n\r\n/**\r\n * Check whether the character code represents an ASCII alphanumeric (`a`\r\n * through `z`, case insensitive, or `0` through `9`).\r\n *\r\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\r\n * (see `asciiAlpha`).\r\n *\r\n * @param code\r\n *   Code.\r\n * @returns {boolean}\r\n *   Whether it matches.\r\n */\r\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/)\r\n\r\n/**\r\n * Check whether the character code represents an ASCII atext.\r\n *\r\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\r\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\r\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\r\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\r\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\r\n * (`{`) to U+007E TILDE (`~`).\r\n *\r\n * See:\r\n * **\\[RFC5322]**:\r\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\r\n * P. Resnick.\r\n * IETF.\r\n *\r\n * @param code\r\n *   Code.\r\n * @returns {boolean}\r\n *   Whether it matches.\r\n */\r\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/)\r\n\r\n/**\r\n * Check whether a character code is an ASCII control character.\r\n *\r\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\r\n * to U+001F (US), or U+007F (DEL).\r\n *\r\n * @param {Code} code\r\n *   Code.\r\n * @returns {boolean}\r\n *   Whether it matches.\r\n */\r\nexport function asciiControl(code) {\r\n  return (\r\n    // Special whitespace codes (which have negative values), C0 and Control\r\n    // character DEL\r\n    code !== null && (code < codes.space || code === codes.del)\r\n  )\r\n}\r\n\r\n/**\r\n * Check whether the character code represents an ASCII digit (`0` through `9`).\r\n *\r\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\r\n * U+0039 (`9`).\r\n *\r\n * @param code\r\n *   Code.\r\n * @returns {boolean}\r\n *   Whether it matches.\r\n */\r\nexport const asciiDigit = regexCheck(/\\d/)\r\n\r\n/**\r\n * Check whether the character code represents an ASCII hex digit (`a` through\r\n * `f`, case insensitive, or `0` through `9`).\r\n *\r\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\r\n * digit, or an ASCII lower hex digit.\r\n *\r\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\r\n * (`A`) to U+0046 (`F`).\r\n *\r\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\r\n * (`a`) to U+0066 (`f`).\r\n *\r\n * @param code\r\n *   Code.\r\n * @returns {boolean}\r\n *   Whether it matches.\r\n */\r\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/)\r\n\r\n/**\r\n * Check whether the character code represents ASCII punctuation.\r\n *\r\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\r\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\r\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\r\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\r\n *\r\n * @param code\r\n *   Code.\r\n * @returns {boolean}\r\n *   Whether it matches.\r\n */\r\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/)\r\n\r\n/**\r\n * Check whether a character code is a markdown line ending.\r\n *\r\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\r\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\r\n *\r\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\r\n * RETURN (CR) are replaced by these virtual characters depending on whether\r\n * they occurred together.\r\n *\r\n * @param {Code} code\r\n *   Code.\r\n * @returns {boolean}\r\n *   Whether it matches.\r\n */\r\nexport function markdownLineEnding(code) {\r\n  return code !== null && code < codes.horizontalTab\r\n}\r\n\r\n/**\r\n * Check whether a character code is a markdown line ending (see\r\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\r\n *\r\n * @param {Code} code\r\n *   Code.\r\n * @returns {boolean}\r\n *   Whether it matches.\r\n */\r\nexport function markdownLineEndingOrSpace(code) {\r\n  return code !== null && (code < codes.nul || code === codes.space)\r\n}\r\n\r\n/**\r\n * Check whether a character code is a markdown space.\r\n *\r\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\r\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\r\n *\r\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\r\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\r\n * SPACE (VS) characters, depending on the column at which the tab occurred.\r\n *\r\n * @param {Code} code\r\n *   Code.\r\n * @returns {boolean}\r\n *   Whether it matches.\r\n */\r\nexport function markdownSpace(code) {\r\n  return (\r\n    code === codes.horizontalTab ||\r\n    code === codes.virtualSpace ||\r\n    code === codes.space\r\n  )\r\n}\r\n\r\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\r\n// In fact adds to the bundle size.\r\n/**\r\n * Check whether the character code represents Unicode punctuation.\r\n *\r\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\r\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\r\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\r\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\r\n * punctuation (see `asciiPunctuation`).\r\n *\r\n * See:\r\n * **\\[UNICODE]**:\r\n * [The Unicode Standard](https://www.unicode.org/versions/).\r\n * Unicode Consortium.\r\n *\r\n * @param code\r\n *   Code.\r\n * @returns\r\n *   Whether it matches.\r\n */\r\nexport const unicodePunctuation = regexCheck(/\\p{P}|\\p{S}/u)\r\n\r\n/**\r\n * Check whether the character code represents Unicode whitespace.\r\n *\r\n * Note that this does handle micromark specific markdown whitespace characters.\r\n * See `markdownLineEndingOrSpace` to check that.\r\n *\r\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\r\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\r\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\r\n *\r\n * See:\r\n * **\\[UNICODE]**:\r\n * [The Unicode Standard](https://www.unicode.org/versions/).\r\n * Unicode Consortium.\r\n *\r\n * @param code\r\n *   Code.\r\n * @returns\r\n *   Whether it matches.\r\n */\r\nexport const unicodeWhitespace = regexCheck(/\\s/)\r\n\r\n/**\r\n * Create a code check from a regex.\r\n *\r\n * @param {RegExp} regex\r\n * @returns {(code: Code) => boolean}\r\n */\r\nfunction regexCheck(regex) {\r\n  return check\r\n\r\n  /**\r\n   * Check whether a code matches the bound regex.\r\n   *\r\n   * @param {Code} code\r\n   *   Character code.\r\n   * @returns {boolean}\r\n   *   Whether the character code matches the bound regex.\r\n   */\r\n  function check(code) {\r\n    return code !== null && code > -1 && regex.test(String.fromCharCode(code))\r\n  }\r\n}\r\n"],
  "mappings": "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",
  "names": []
}
