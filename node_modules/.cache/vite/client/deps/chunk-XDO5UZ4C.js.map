{
  "version": 3,
  "sources": ["../../../../mdast-util-to-markdown/lib/handle/blockquote.js", "../../../../mdast-util-to-markdown/lib/util/pattern-in-scope.js", "../../../../mdast-util-to-markdown/lib/handle/break.js", "../../../../longest-streak/index.js", "../../../../mdast-util-to-markdown/lib/util/format-code-as-indented.js", "../../../../mdast-util-to-markdown/lib/util/check-fence.js", "../../../../mdast-util-to-markdown/lib/handle/code.js", "../../../../mdast-util-to-markdown/lib/util/check-quote.js", "../../../../mdast-util-to-markdown/lib/handle/definition.js", "../../../../mdast-util-to-markdown/lib/util/check-emphasis.js", "../../../../mdast-util-to-markdown/lib/handle/emphasis.js", "../../../../mdast-util-to-string/lib/index.js", "../../../../mdast-util-to-markdown/lib/util/format-heading-as-setext.js", "../../../../mdast-util-to-markdown/lib/handle/heading.js", "../../../../mdast-util-to-markdown/lib/handle/html.js", "../../../../mdast-util-to-markdown/lib/handle/image.js", "../../../../mdast-util-to-markdown/lib/handle/image-reference.js", "../../../../mdast-util-to-markdown/lib/handle/inline-code.js", "../../../../mdast-util-to-markdown/lib/util/format-link-as-autolink.js", "../../../../mdast-util-to-markdown/lib/handle/link.js", "../../../../mdast-util-to-markdown/lib/handle/link-reference.js", "../../../../mdast-util-to-markdown/lib/util/check-bullet.js", "../../../../mdast-util-to-markdown/lib/util/check-bullet-other.js", "../../../../mdast-util-to-markdown/lib/util/check-bullet-ordered.js", "../../../../mdast-util-to-markdown/lib/util/check-rule.js", "../../../../mdast-util-to-markdown/lib/handle/list.js", "../../../../mdast-util-to-markdown/lib/util/check-list-item-indent.js", "../../../../mdast-util-to-markdown/lib/handle/list-item.js", "../../../../mdast-util-to-markdown/lib/handle/paragraph.js", "../../../../mdast-util-phrasing/lib/index.js", "../../../../mdast-util-to-markdown/lib/handle/root.js", "../../../../mdast-util-to-markdown/lib/util/check-strong.js", "../../../../mdast-util-to-markdown/lib/handle/strong.js", "../../../../mdast-util-to-markdown/lib/handle/text.js", "../../../../mdast-util-to-markdown/lib/util/check-rule-repetition.js", "../../../../mdast-util-to-markdown/lib/handle/thematic-break.js", "../../../../mdast-util-to-markdown/lib/handle/index.js", "../../../../mdast-util-to-markdown/lib/configure.js", "../../../../decode-named-character-reference/index.dom.js", "../../../../micromark-factory-space/dev/index.js", "../../../../micromark-core-commonmark/dev/lib/code-fenced.js", "../../../../micromark-factory-whitespace/dev/index.js", "../../../../micromark-util-chunked/dev/index.js", "../../../../micromark-util-classify-character/dev/index.js", "../../../../micromark-util-resolve-all/index.js", "../../../../micromark-core-commonmark/dev/lib/blank-line.js", "../../../../micromark-factory-destination/dev/index.js", "../../../../micromark-factory-label/dev/index.js", "../../../../micromark-factory-title/dev/index.js", "../../../../micromark-util-normalize-identifier/dev/index.js", "../../../../micromark-core-commonmark/dev/lib/label-end.js", "../../../../micromark-core-commonmark/dev/lib/label-start-image.js", "../../../../micromark-core-commonmark/dev/lib/label-start-link.js"],
  "sourcesContent": ["/**\r\n * @typedef {import('mdast').Blockquote} Blockquote\r\n * @typedef {import('mdast').Parents} Parents\r\n * @typedef {import('../types.js').Info} Info\r\n * @typedef {import('../types.js').Map} Map\r\n * @typedef {import('../types.js').State} State\r\n */\r\n\r\n/**\r\n * @param {Blockquote} node\r\n * @param {Parents | undefined} _\r\n * @param {State} state\r\n * @param {Info} info\r\n * @returns {string}\r\n */\r\nexport function blockquote(node, _, state, info) {\r\n  const exit = state.enter('blockquote')\r\n  const tracker = state.createTracker(info)\r\n  tracker.move('> ')\r\n  tracker.shift(2)\r\n  const value = state.indentLines(\r\n    state.containerFlow(node, tracker.current()),\r\n    map\r\n  )\r\n  exit()\r\n  return value\r\n}\r\n\r\n/** @type {Map} */\r\nfunction map(line, _, blank) {\r\n  return '>' + (blank ? '' : ' ') + line\r\n}\r\n", "/**\r\n * @typedef {import('../types.js').ConstructName} ConstructName\r\n * @typedef {import('../types.js').Unsafe} Unsafe\r\n */\r\n\r\n/**\r\n * @param {Array<ConstructName>} stack\r\n * @param {Unsafe} pattern\r\n * @returns {boolean}\r\n */\r\nexport function patternInScope(stack, pattern) {\r\n  return (\r\n    listInScope(stack, pattern.inConstruct, true) &&\r\n    !listInScope(stack, pattern.notInConstruct, false)\r\n  )\r\n}\r\n\r\n/**\r\n * @param {Array<ConstructName>} stack\r\n * @param {Unsafe['inConstruct']} list\r\n * @param {boolean} none\r\n * @returns {boolean}\r\n */\r\nfunction listInScope(stack, list, none) {\r\n  if (typeof list === 'string') {\r\n    list = [list]\r\n  }\r\n\r\n  if (!list || list.length === 0) {\r\n    return none\r\n  }\r\n\r\n  let index = -1\r\n\r\n  while (++index < list.length) {\r\n    if (stack.includes(list[index])) {\r\n      return true\r\n    }\r\n  }\r\n\r\n  return false\r\n}\r\n", "/**\r\n * @typedef {import('mdast').Break} Break\r\n * @typedef {import('mdast').Parents} Parents\r\n * @typedef {import('../types.js').Info} Info\r\n * @typedef {import('../types.js').State} State\r\n */\r\n\r\nimport {patternInScope} from '../util/pattern-in-scope.js'\r\n\r\n/**\r\n * @param {Break} _\r\n * @param {Parents | undefined} _1\r\n * @param {State} state\r\n * @param {Info} info\r\n * @returns {string}\r\n */\r\nexport function hardBreak(_, _1, state, info) {\r\n  let index = -1\r\n\r\n  while (++index < state.unsafe.length) {\r\n    // If we can’t put eols in this construct (setext headings, tables), use a\r\n    // space instead.\r\n    if (\r\n      state.unsafe[index].character === '\\n' &&\r\n      patternInScope(state.stack, state.unsafe[index])\r\n    ) {\r\n      return /[ \\t]/.test(info.before) ? '' : ' '\r\n    }\r\n  }\r\n\r\n  return '\\\\\\n'\r\n}\r\n", "/**\r\n * Get the count of the longest repeating streak of `substring` in `value`.\r\n *\r\n * @param {string} value\r\n *   Content to search in.\r\n * @param {string} substring\r\n *   Substring to look for, typically one character.\r\n * @returns {number}\r\n *   Count of most frequent adjacent `substring`s in `value`.\r\n */\r\nexport function longestStreak(value, substring) {\r\n  const source = String(value)\r\n  let index = source.indexOf(substring)\r\n  let expected = index\r\n  let count = 0\r\n  let max = 0\r\n\r\n  if (typeof substring !== 'string') {\r\n    throw new TypeError('Expected substring')\r\n  }\r\n\r\n  while (index !== -1) {\r\n    if (index === expected) {\r\n      if (++count > max) {\r\n        max = count\r\n      }\r\n    } else {\r\n      count = 1\r\n    }\r\n\r\n    expected = index + substring.length\r\n    index = source.indexOf(substring, expected)\r\n  }\r\n\r\n  return max\r\n}\r\n", "/**\r\n * @typedef {import('mdast').Code} Code\r\n * @typedef {import('../types.js').State} State\r\n */\r\n\r\n/**\r\n * @param {Code} node\r\n * @param {State} state\r\n * @returns {boolean}\r\n */\r\nexport function formatCodeAsIndented(node, state) {\r\n  return Boolean(\r\n    state.options.fences === false &&\r\n      node.value &&\r\n      // If there’s no info…\r\n      !node.lang &&\r\n      // And there’s a non-whitespace character…\r\n      /[^ \\r\\n]/.test(node.value) &&\r\n      // And the value doesn’t start or end in a blank…\r\n      !/^[\\t ]*(?:[\\r\\n]|$)|(?:^|[\\r\\n])[\\t ]*$/.test(node.value)\r\n  )\r\n}\r\n", "/**\r\n * @typedef {import('../types.js').Options} Options\r\n * @typedef {import('../types.js').State} State\r\n */\r\n\r\n/**\r\n * @param {State} state\r\n * @returns {Exclude<Options['fence'], null | undefined>}\r\n */\r\nexport function checkFence(state) {\r\n  const marker = state.options.fence || '`'\r\n\r\n  if (marker !== '`' && marker !== '~') {\r\n    throw new Error(\r\n      'Cannot serialize code with `' +\r\n        marker +\r\n        '` for `options.fence`, expected `` ` `` or `~`'\r\n    )\r\n  }\r\n\r\n  return marker\r\n}\r\n", "/**\r\n * @typedef {import('mdast').Code} Code\r\n * @typedef {import('mdast').Parents} Parents\r\n * @typedef {import('../types.js').Info} Info\r\n * @typedef {import('../types.js').Map} Map\r\n * @typedef {import('../types.js').State} State\r\n */\r\n\r\nimport {longestStreak} from 'longest-streak'\r\nimport {formatCodeAsIndented} from '../util/format-code-as-indented.js'\r\nimport {checkFence} from '../util/check-fence.js'\r\n\r\n/**\r\n * @param {Code} node\r\n * @param {Parents | undefined} _\r\n * @param {State} state\r\n * @param {Info} info\r\n * @returns {string}\r\n */\r\nexport function code(node, _, state, info) {\r\n  const marker = checkFence(state)\r\n  const raw = node.value || ''\r\n  const suffix = marker === '`' ? 'GraveAccent' : 'Tilde'\r\n\r\n  if (formatCodeAsIndented(node, state)) {\r\n    const exit = state.enter('codeIndented')\r\n    const value = state.indentLines(raw, map)\r\n    exit()\r\n    return value\r\n  }\r\n\r\n  const tracker = state.createTracker(info)\r\n  const sequence = marker.repeat(Math.max(longestStreak(raw, marker) + 1, 3))\r\n  const exit = state.enter('codeFenced')\r\n  let value = tracker.move(sequence)\r\n\r\n  if (node.lang) {\r\n    const subexit = state.enter(`codeFencedLang${suffix}`)\r\n    value += tracker.move(\r\n      state.safe(node.lang, {\r\n        before: value,\r\n        after: ' ',\r\n        encode: ['`'],\r\n        ...tracker.current()\r\n      })\r\n    )\r\n    subexit()\r\n  }\r\n\r\n  if (node.lang && node.meta) {\r\n    const subexit = state.enter(`codeFencedMeta${suffix}`)\r\n    value += tracker.move(' ')\r\n    value += tracker.move(\r\n      state.safe(node.meta, {\r\n        before: value,\r\n        after: '\\n',\r\n        encode: ['`'],\r\n        ...tracker.current()\r\n      })\r\n    )\r\n    subexit()\r\n  }\r\n\r\n  value += tracker.move('\\n')\r\n\r\n  if (raw) {\r\n    value += tracker.move(raw + '\\n')\r\n  }\r\n\r\n  value += tracker.move(sequence)\r\n  exit()\r\n  return value\r\n}\r\n\r\n/** @type {Map} */\r\nfunction map(line, _, blank) {\r\n  return (blank ? '' : '    ') + line\r\n}\r\n", "/**\r\n * @typedef {import('../types.js').Options} Options\r\n * @typedef {import('../types.js').State} State\r\n */\r\n\r\n/**\r\n * @param {State} state\r\n * @returns {Exclude<Options['quote'], null | undefined>}\r\n */\r\nexport function checkQuote(state) {\r\n  const marker = state.options.quote || '\"'\r\n\r\n  if (marker !== '\"' && marker !== \"'\") {\r\n    throw new Error(\r\n      'Cannot serialize title with `' +\r\n        marker +\r\n        '` for `options.quote`, expected `\"`, or `\\'`'\r\n    )\r\n  }\r\n\r\n  return marker\r\n}\r\n", "/**\r\n * @typedef {import('mdast').Definition} Definition\r\n * @typedef {import('mdast').Parents} Parents\r\n * @typedef {import('../types.js').Info} Info\r\n * @typedef {import('../types.js').State} State\r\n */\r\n\r\nimport {checkQuote} from '../util/check-quote.js'\r\n\r\n/**\r\n * @param {Definition} node\r\n * @param {Parents | undefined} _\r\n * @param {State} state\r\n * @param {Info} info\r\n * @returns {string}\r\n */\r\nexport function definition(node, _, state, info) {\r\n  const quote = checkQuote(state)\r\n  const suffix = quote === '\"' ? 'Quote' : 'Apostrophe'\r\n  const exit = state.enter('definition')\r\n  let subexit = state.enter('label')\r\n  const tracker = state.createTracker(info)\r\n  let value = tracker.move('[')\r\n  value += tracker.move(\r\n    state.safe(state.associationId(node), {\r\n      before: value,\r\n      after: ']',\r\n      ...tracker.current()\r\n    })\r\n  )\r\n  value += tracker.move(']: ')\r\n\r\n  subexit()\r\n\r\n  if (\r\n    // If there’s no url, or…\r\n    !node.url ||\r\n    // If there are control characters or whitespace.\r\n    /[\\0- \\u007F]/.test(node.url)\r\n  ) {\r\n    subexit = state.enter('destinationLiteral')\r\n    value += tracker.move('<')\r\n    value += tracker.move(\r\n      state.safe(node.url, {before: value, after: '>', ...tracker.current()})\r\n    )\r\n    value += tracker.move('>')\r\n  } else {\r\n    // No whitespace, raw is prettier.\r\n    subexit = state.enter('destinationRaw')\r\n    value += tracker.move(\r\n      state.safe(node.url, {\r\n        before: value,\r\n        after: node.title ? ' ' : '\\n',\r\n        ...tracker.current()\r\n      })\r\n    )\r\n  }\r\n\r\n  subexit()\r\n\r\n  if (node.title) {\r\n    subexit = state.enter(`title${suffix}`)\r\n    value += tracker.move(' ' + quote)\r\n    value += tracker.move(\r\n      state.safe(node.title, {\r\n        before: value,\r\n        after: quote,\r\n        ...tracker.current()\r\n      })\r\n    )\r\n    value += tracker.move(quote)\r\n    subexit()\r\n  }\r\n\r\n  exit()\r\n\r\n  return value\r\n}\r\n", "/**\r\n * @typedef {import('../types.js').Options} Options\r\n * @typedef {import('../types.js').State} State\r\n */\r\n\r\n/**\r\n * @param {State} state\r\n * @returns {Exclude<Options['emphasis'], null | undefined>}\r\n */\r\nexport function checkEmphasis(state) {\r\n  const marker = state.options.emphasis || '*'\r\n\r\n  if (marker !== '*' && marker !== '_') {\r\n    throw new Error(\r\n      'Cannot serialize emphasis with `' +\r\n        marker +\r\n        '` for `options.emphasis`, expected `*`, or `_`'\r\n    )\r\n  }\r\n\r\n  return marker\r\n}\r\n", "/**\r\n * @typedef {import('mdast').Emphasis} Emphasis\r\n * @typedef {import('mdast').Parents} Parents\r\n * @typedef {import('../types.js').Info} Info\r\n * @typedef {import('../types.js').State} State\r\n */\r\n\r\nimport {checkEmphasis} from '../util/check-emphasis.js'\r\n\r\nemphasis.peek = emphasisPeek\r\n\r\n// To do: there are cases where emphasis cannot “form” depending on the\r\n// previous or next character of sequences.\r\n// There’s no way around that though, except for injecting zero-width stuff.\r\n// Do we need to safeguard against that?\r\n/**\r\n * @param {Emphasis} node\r\n * @param {Parents | undefined} _\r\n * @param {State} state\r\n * @param {Info} info\r\n * @returns {string}\r\n */\r\nexport function emphasis(node, _, state, info) {\r\n  const marker = checkEmphasis(state)\r\n  const exit = state.enter('emphasis')\r\n  const tracker = state.createTracker(info)\r\n  let value = tracker.move(marker)\r\n  value += tracker.move(\r\n    state.containerPhrasing(node, {\r\n      before: value,\r\n      after: marker,\r\n      ...tracker.current()\r\n    })\r\n  )\r\n  value += tracker.move(marker)\r\n  exit()\r\n  return value\r\n}\r\n\r\n/**\r\n * @param {Emphasis} _\r\n * @param {Parents | undefined} _1\r\n * @param {State} state\r\n * @returns {string}\r\n */\r\nfunction emphasisPeek(_, _1, state) {\r\n  return state.options.emphasis || '*'\r\n}\r\n", "/**\r\n * @typedef {import('mdast').Nodes} Nodes\r\n *\r\n * @typedef Options\r\n *   Configuration (optional).\r\n * @property {boolean | null | undefined} [includeImageAlt=true]\r\n *   Whether to use `alt` for `image`s (default: `true`).\r\n * @property {boolean | null | undefined} [includeHtml=true]\r\n *   Whether to use `value` of HTML (default: `true`).\r\n */\r\n\r\n/** @type {Options} */\r\nconst emptyOptions = {}\r\n\r\n/**\r\n * Get the text content of a node or list of nodes.\r\n *\r\n * Prefers the node’s plain-text fields, otherwise serializes its children,\r\n * and if the given value is an array, serialize the nodes in it.\r\n *\r\n * @param {unknown} [value]\r\n *   Thing to serialize, typically `Node`.\r\n * @param {Options | null | undefined} [options]\r\n *   Configuration (optional).\r\n * @returns {string}\r\n *   Serialized `value`.\r\n */\r\nexport function toString(value, options) {\r\n  const settings = options || emptyOptions\r\n  const includeImageAlt =\r\n    typeof settings.includeImageAlt === 'boolean'\r\n      ? settings.includeImageAlt\r\n      : true\r\n  const includeHtml =\r\n    typeof settings.includeHtml === 'boolean' ? settings.includeHtml : true\r\n\r\n  return one(value, includeImageAlt, includeHtml)\r\n}\r\n\r\n/**\r\n * One node or several nodes.\r\n *\r\n * @param {unknown} value\r\n *   Thing to serialize.\r\n * @param {boolean} includeImageAlt\r\n *   Include image `alt`s.\r\n * @param {boolean} includeHtml\r\n *   Include HTML.\r\n * @returns {string}\r\n *   Serialized node.\r\n */\r\nfunction one(value, includeImageAlt, includeHtml) {\r\n  if (node(value)) {\r\n    if ('value' in value) {\r\n      return value.type === 'html' && !includeHtml ? '' : value.value\r\n    }\r\n\r\n    if (includeImageAlt && 'alt' in value && value.alt) {\r\n      return value.alt\r\n    }\r\n\r\n    if ('children' in value) {\r\n      return all(value.children, includeImageAlt, includeHtml)\r\n    }\r\n  }\r\n\r\n  if (Array.isArray(value)) {\r\n    return all(value, includeImageAlt, includeHtml)\r\n  }\r\n\r\n  return ''\r\n}\r\n\r\n/**\r\n * Serialize a list of nodes.\r\n *\r\n * @param {Array<unknown>} values\r\n *   Thing to serialize.\r\n * @param {boolean} includeImageAlt\r\n *   Include image `alt`s.\r\n * @param {boolean} includeHtml\r\n *   Include HTML.\r\n * @returns {string}\r\n *   Serialized nodes.\r\n */\r\nfunction all(values, includeImageAlt, includeHtml) {\r\n  /** @type {Array<string>} */\r\n  const result = []\r\n  let index = -1\r\n\r\n  while (++index < values.length) {\r\n    result[index] = one(values[index], includeImageAlt, includeHtml)\r\n  }\r\n\r\n  return result.join('')\r\n}\r\n\r\n/**\r\n * Check if `value` looks like a node.\r\n *\r\n * @param {unknown} value\r\n *   Thing.\r\n * @returns {value is Nodes}\r\n *   Whether `value` is a node.\r\n */\r\nfunction node(value) {\r\n  return Boolean(value && typeof value === 'object')\r\n}\r\n", "/**\r\n * @typedef {import('mdast').Heading} Heading\r\n * @typedef {import('../types.js').State} State\r\n */\r\n\r\nimport {EXIT, visit} from 'unist-util-visit'\r\nimport {toString} from 'mdast-util-to-string'\r\n\r\n/**\r\n * @param {Heading} node\r\n * @param {State} state\r\n * @returns {boolean}\r\n */\r\nexport function formatHeadingAsSetext(node, state) {\r\n  let literalWithBreak = false\r\n\r\n  // Look for literals with a line break.\r\n  // Note that this also\r\n  visit(node, function (node) {\r\n    if (\r\n      ('value' in node && /\\r?\\n|\\r/.test(node.value)) ||\r\n      node.type === 'break'\r\n    ) {\r\n      literalWithBreak = true\r\n      return EXIT\r\n    }\r\n  })\r\n\r\n  return Boolean(\r\n    (!node.depth || node.depth < 3) &&\r\n      toString(node) &&\r\n      (state.options.setext || literalWithBreak)\r\n  )\r\n}\r\n", "/**\r\n * @typedef {import('mdast').Heading} Heading\r\n * @typedef {import('mdast').Parents} Parents\r\n * @typedef {import('../types.js').Info} Info\r\n * @typedef {import('../types.js').State} State\r\n */\r\n\r\nimport {formatHeadingAsSetext} from '../util/format-heading-as-setext.js'\r\n\r\n/**\r\n * @param {Heading} node\r\n * @param {Parents | undefined} _\r\n * @param {State} state\r\n * @param {Info} info\r\n * @returns {string}\r\n */\r\nexport function heading(node, _, state, info) {\r\n  const rank = Math.max(Math.min(6, node.depth || 1), 1)\r\n  const tracker = state.createTracker(info)\r\n\r\n  if (formatHeadingAsSetext(node, state)) {\r\n    const exit = state.enter('headingSetext')\r\n    const subexit = state.enter('phrasing')\r\n    const value = state.containerPhrasing(node, {\r\n      ...tracker.current(),\r\n      before: '\\n',\r\n      after: '\\n'\r\n    })\r\n    subexit()\r\n    exit()\r\n\r\n    return (\r\n      value +\r\n      '\\n' +\r\n      (rank === 1 ? '=' : '-').repeat(\r\n        // The whole size…\r\n        value.length -\r\n          // Minus the position of the character after the last EOL (or\r\n          // 0 if there is none)…\r\n          (Math.max(value.lastIndexOf('\\r'), value.lastIndexOf('\\n')) + 1)\r\n      )\r\n    )\r\n  }\r\n\r\n  const sequence = '#'.repeat(rank)\r\n  const exit = state.enter('headingAtx')\r\n  const subexit = state.enter('phrasing')\r\n\r\n  // Note: for proper tracking, we should reset the output positions when there\r\n  // is no content returned, because then the space is not output.\r\n  // Practically, in that case, there is no content, so it doesn’t matter that\r\n  // we’ve tracked one too many characters.\r\n  tracker.move(sequence + ' ')\r\n\r\n  let value = state.containerPhrasing(node, {\r\n    before: '# ',\r\n    after: '\\n',\r\n    ...tracker.current()\r\n  })\r\n\r\n  if (/^[\\t ]/.test(value)) {\r\n    // To do: what effect has the character reference on tracking?\r\n    value =\r\n      '&#x' +\r\n      value.charCodeAt(0).toString(16).toUpperCase() +\r\n      ';' +\r\n      value.slice(1)\r\n  }\r\n\r\n  value = value ? sequence + ' ' + value : sequence\r\n\r\n  if (state.options.closeAtx) {\r\n    value += ' ' + sequence\r\n  }\r\n\r\n  subexit()\r\n  exit()\r\n\r\n  return value\r\n}\r\n", "/**\r\n * @typedef {import('mdast').Html} Html\r\n */\r\n\r\nhtml.peek = htmlPeek\r\n\r\n/**\r\n * @param {Html} node\r\n * @returns {string}\r\n */\r\nexport function html(node) {\r\n  return node.value || ''\r\n}\r\n\r\n/**\r\n * @returns {string}\r\n */\r\nfunction htmlPeek() {\r\n  return '<'\r\n}\r\n", "/**\r\n * @typedef {import('mdast').Image} Image\r\n * @typedef {import('mdast').Parents} Parents\r\n * @typedef {import('../types.js').Info} Info\r\n * @typedef {import('../types.js').State} State\r\n */\r\n\r\nimport {checkQuote} from '../util/check-quote.js'\r\n\r\nimage.peek = imagePeek\r\n\r\n/**\r\n * @param {Image} node\r\n * @param {Parents | undefined} _\r\n * @param {State} state\r\n * @param {Info} info\r\n * @returns {string}\r\n */\r\nexport function image(node, _, state, info) {\r\n  const quote = checkQuote(state)\r\n  const suffix = quote === '\"' ? 'Quote' : 'Apostrophe'\r\n  const exit = state.enter('image')\r\n  let subexit = state.enter('label')\r\n  const tracker = state.createTracker(info)\r\n  let value = tracker.move('![')\r\n  value += tracker.move(\r\n    state.safe(node.alt, {before: value, after: ']', ...tracker.current()})\r\n  )\r\n  value += tracker.move('](')\r\n\r\n  subexit()\r\n\r\n  if (\r\n    // If there’s no url but there is a title…\r\n    (!node.url && node.title) ||\r\n    // If there are control characters or whitespace.\r\n    /[\\0- \\u007F]/.test(node.url)\r\n  ) {\r\n    subexit = state.enter('destinationLiteral')\r\n    value += tracker.move('<')\r\n    value += tracker.move(\r\n      state.safe(node.url, {before: value, after: '>', ...tracker.current()})\r\n    )\r\n    value += tracker.move('>')\r\n  } else {\r\n    // No whitespace, raw is prettier.\r\n    subexit = state.enter('destinationRaw')\r\n    value += tracker.move(\r\n      state.safe(node.url, {\r\n        before: value,\r\n        after: node.title ? ' ' : ')',\r\n        ...tracker.current()\r\n      })\r\n    )\r\n  }\r\n\r\n  subexit()\r\n\r\n  if (node.title) {\r\n    subexit = state.enter(`title${suffix}`)\r\n    value += tracker.move(' ' + quote)\r\n    value += tracker.move(\r\n      state.safe(node.title, {\r\n        before: value,\r\n        after: quote,\r\n        ...tracker.current()\r\n      })\r\n    )\r\n    value += tracker.move(quote)\r\n    subexit()\r\n  }\r\n\r\n  value += tracker.move(')')\r\n  exit()\r\n\r\n  return value\r\n}\r\n\r\n/**\r\n * @returns {string}\r\n */\r\nfunction imagePeek() {\r\n  return '!'\r\n}\r\n", "/**\r\n * @typedef {import('mdast').ImageReference} ImageReference\r\n * @typedef {import('mdast').Parents} Parents\r\n * @typedef {import('../types.js').Info} Info\r\n * @typedef {import('../types.js').State} State\r\n */\r\n\r\nimageReference.peek = imageReferencePeek\r\n\r\n/**\r\n * @param {ImageReference} node\r\n * @param {Parents | undefined} _\r\n * @param {State} state\r\n * @param {Info} info\r\n * @returns {string}\r\n */\r\nexport function imageReference(node, _, state, info) {\r\n  const type = node.referenceType\r\n  const exit = state.enter('imageReference')\r\n  let subexit = state.enter('label')\r\n  const tracker = state.createTracker(info)\r\n  let value = tracker.move('![')\r\n  const alt = state.safe(node.alt, {\r\n    before: value,\r\n    after: ']',\r\n    ...tracker.current()\r\n  })\r\n  value += tracker.move(alt + '][')\r\n\r\n  subexit()\r\n  // Hide the fact that we’re in phrasing, because escapes don’t work.\r\n  const stack = state.stack\r\n  state.stack = []\r\n  subexit = state.enter('reference')\r\n  // Note: for proper tracking, we should reset the output positions when we end\r\n  // up making a `shortcut` reference, because then there is no brace output.\r\n  // Practically, in that case, there is no content, so it doesn’t matter that\r\n  // we’ve tracked one too many characters.\r\n  const reference = state.safe(state.associationId(node), {\r\n    before: value,\r\n    after: ']',\r\n    ...tracker.current()\r\n  })\r\n  subexit()\r\n  state.stack = stack\r\n  exit()\r\n\r\n  if (type === 'full' || !alt || alt !== reference) {\r\n    value += tracker.move(reference + ']')\r\n  } else if (type === 'shortcut') {\r\n    // Remove the unwanted `[`.\r\n    value = value.slice(0, -1)\r\n  } else {\r\n    value += tracker.move(']')\r\n  }\r\n\r\n  return value\r\n}\r\n\r\n/**\r\n * @returns {string}\r\n */\r\nfunction imageReferencePeek() {\r\n  return '!'\r\n}\r\n", "/**\r\n * @typedef {import('mdast').InlineCode} InlineCode\r\n * @typedef {import('mdast').Parents} Parents\r\n * @typedef {import('../types.js').State} State\r\n */\r\n\r\ninlineCode.peek = inlineCodePeek\r\n\r\n/**\r\n * @param {InlineCode} node\r\n * @param {Parents | undefined} _\r\n * @param {State} state\r\n * @returns {string}\r\n */\r\nexport function inlineCode(node, _, state) {\r\n  let value = node.value || ''\r\n  let sequence = '`'\r\n  let index = -1\r\n\r\n  // If there is a single grave accent on its own in the code, use a fence of\r\n  // two.\r\n  // If there are two in a row, use one.\r\n  while (new RegExp('(^|[^`])' + sequence + '([^`]|$)').test(value)) {\r\n    sequence += '`'\r\n  }\r\n\r\n  // If this is not just spaces or eols (tabs don’t count), and either the\r\n  // first or last character are a space, eol, or tick, then pad with spaces.\r\n  if (\r\n    /[^ \\r\\n]/.test(value) &&\r\n    ((/^[ \\r\\n]/.test(value) && /[ \\r\\n]$/.test(value)) || /^`|`$/.test(value))\r\n  ) {\r\n    value = ' ' + value + ' '\r\n  }\r\n\r\n  // We have a potential problem: certain characters after eols could result in\r\n  // blocks being seen.\r\n  // For example, if someone injected the string `'\\n# b'`, then that would\r\n  // result in an ATX heading.\r\n  // We can’t escape characters in `inlineCode`, but because eols are\r\n  // transformed to spaces when going from markdown to HTML anyway, we can swap\r\n  // them out.\r\n  while (++index < state.unsafe.length) {\r\n    const pattern = state.unsafe[index]\r\n    const expression = state.compilePattern(pattern)\r\n    /** @type {RegExpExecArray | null} */\r\n    let match\r\n\r\n    // Only look for `atBreak`s.\r\n    // Btw: note that `atBreak` patterns will always start the regex at LF or\r\n    // CR.\r\n    if (!pattern.atBreak) continue\r\n\r\n    while ((match = expression.exec(value))) {\r\n      let position = match.index\r\n\r\n      // Support CRLF (patterns only look for one of the characters).\r\n      if (\r\n        value.charCodeAt(position) === 10 /* `\\n` */ &&\r\n        value.charCodeAt(position - 1) === 13 /* `\\r` */\r\n      ) {\r\n        position--\r\n      }\r\n\r\n      value = value.slice(0, position) + ' ' + value.slice(match.index + 1)\r\n    }\r\n  }\r\n\r\n  return sequence + value + sequence\r\n}\r\n\r\n/**\r\n * @returns {string}\r\n */\r\nfunction inlineCodePeek() {\r\n  return '`'\r\n}\r\n", "/**\r\n * @typedef {import('mdast').Link} Link\r\n * @typedef {import('../types.js').State} State\r\n */\r\n\r\nimport {toString} from 'mdast-util-to-string'\r\n\r\n/**\r\n * @param {Link} node\r\n * @param {State} state\r\n * @returns {boolean}\r\n */\r\nexport function formatLinkAsAutolink(node, state) {\r\n  const raw = toString(node)\r\n\r\n  return Boolean(\r\n    !state.options.resourceLink &&\r\n      // If there’s a url…\r\n      node.url &&\r\n      // And there’s a no title…\r\n      !node.title &&\r\n      // And the content of `node` is a single text node…\r\n      node.children &&\r\n      node.children.length === 1 &&\r\n      node.children[0].type === 'text' &&\r\n      // And if the url is the same as the content…\r\n      (raw === node.url || 'mailto:' + raw === node.url) &&\r\n      // And that starts w/ a protocol…\r\n      /^[a-z][a-z+.-]+:/i.test(node.url) &&\r\n      // And that doesn’t contain ASCII control codes (character escapes and\r\n      // references don’t work), space, or angle brackets…\r\n      !/[\\0- <>\\u007F]/.test(node.url)\r\n  )\r\n}\r\n", "/**\r\n * @typedef {import('mdast').Link} Link\r\n * @typedef {import('mdast').Parents} Parents\r\n * @typedef {import('../types.js').Exit} Exit\r\n * @typedef {import('../types.js').Info} Info\r\n * @typedef {import('../types.js').State} State\r\n */\r\n\r\nimport {checkQuote} from '../util/check-quote.js'\r\nimport {formatLinkAsAutolink} from '../util/format-link-as-autolink.js'\r\n\r\nlink.peek = linkPeek\r\n\r\n/**\r\n * @param {Link} node\r\n * @param {Parents | undefined} _\r\n * @param {State} state\r\n * @param {Info} info\r\n * @returns {string}\r\n */\r\nexport function link(node, _, state, info) {\r\n  const quote = checkQuote(state)\r\n  const suffix = quote === '\"' ? 'Quote' : 'Apostrophe'\r\n  const tracker = state.createTracker(info)\r\n  /** @type {Exit} */\r\n  let exit\r\n  /** @type {Exit} */\r\n  let subexit\r\n\r\n  if (formatLinkAsAutolink(node, state)) {\r\n    // Hide the fact that we’re in phrasing, because escapes don’t work.\r\n    const stack = state.stack\r\n    state.stack = []\r\n    exit = state.enter('autolink')\r\n    let value = tracker.move('<')\r\n    value += tracker.move(\r\n      state.containerPhrasing(node, {\r\n        before: value,\r\n        after: '>',\r\n        ...tracker.current()\r\n      })\r\n    )\r\n    value += tracker.move('>')\r\n    exit()\r\n    state.stack = stack\r\n    return value\r\n  }\r\n\r\n  exit = state.enter('link')\r\n  subexit = state.enter('label')\r\n  let value = tracker.move('[')\r\n  value += tracker.move(\r\n    state.containerPhrasing(node, {\r\n      before: value,\r\n      after: '](',\r\n      ...tracker.current()\r\n    })\r\n  )\r\n  value += tracker.move('](')\r\n  subexit()\r\n\r\n  if (\r\n    // If there’s no url but there is a title…\r\n    (!node.url && node.title) ||\r\n    // If there are control characters or whitespace.\r\n    /[\\0- \\u007F]/.test(node.url)\r\n  ) {\r\n    subexit = state.enter('destinationLiteral')\r\n    value += tracker.move('<')\r\n    value += tracker.move(\r\n      state.safe(node.url, {before: value, after: '>', ...tracker.current()})\r\n    )\r\n    value += tracker.move('>')\r\n  } else {\r\n    // No whitespace, raw is prettier.\r\n    subexit = state.enter('destinationRaw')\r\n    value += tracker.move(\r\n      state.safe(node.url, {\r\n        before: value,\r\n        after: node.title ? ' ' : ')',\r\n        ...tracker.current()\r\n      })\r\n    )\r\n  }\r\n\r\n  subexit()\r\n\r\n  if (node.title) {\r\n    subexit = state.enter(`title${suffix}`)\r\n    value += tracker.move(' ' + quote)\r\n    value += tracker.move(\r\n      state.safe(node.title, {\r\n        before: value,\r\n        after: quote,\r\n        ...tracker.current()\r\n      })\r\n    )\r\n    value += tracker.move(quote)\r\n    subexit()\r\n  }\r\n\r\n  value += tracker.move(')')\r\n\r\n  exit()\r\n  return value\r\n}\r\n\r\n/**\r\n * @param {Link} node\r\n * @param {Parents | undefined} _\r\n * @param {State} state\r\n * @returns {string}\r\n */\r\nfunction linkPeek(node, _, state) {\r\n  return formatLinkAsAutolink(node, state) ? '<' : '['\r\n}\r\n", "/**\r\n * @typedef {import('mdast').LinkReference} LinkReference\r\n * @typedef {import('mdast').Parents} Parents\r\n * @typedef {import('../types.js').Info} Info\r\n * @typedef {import('../types.js').State} State\r\n */\r\n\r\nlinkReference.peek = linkReferencePeek\r\n\r\n/**\r\n * @param {LinkReference} node\r\n * @param {Parents | undefined} _\r\n * @param {State} state\r\n * @param {Info} info\r\n * @returns {string}\r\n */\r\nexport function linkReference(node, _, state, info) {\r\n  const type = node.referenceType\r\n  const exit = state.enter('linkReference')\r\n  let subexit = state.enter('label')\r\n  const tracker = state.createTracker(info)\r\n  let value = tracker.move('[')\r\n  const text = state.containerPhrasing(node, {\r\n    before: value,\r\n    after: ']',\r\n    ...tracker.current()\r\n  })\r\n  value += tracker.move(text + '][')\r\n\r\n  subexit()\r\n  // Hide the fact that we’re in phrasing, because escapes don’t work.\r\n  const stack = state.stack\r\n  state.stack = []\r\n  subexit = state.enter('reference')\r\n  // Note: for proper tracking, we should reset the output positions when we end\r\n  // up making a `shortcut` reference, because then there is no brace output.\r\n  // Practically, in that case, there is no content, so it doesn’t matter that\r\n  // we’ve tracked one too many characters.\r\n  const reference = state.safe(state.associationId(node), {\r\n    before: value,\r\n    after: ']',\r\n    ...tracker.current()\r\n  })\r\n  subexit()\r\n  state.stack = stack\r\n  exit()\r\n\r\n  if (type === 'full' || !text || text !== reference) {\r\n    value += tracker.move(reference + ']')\r\n  } else if (type === 'shortcut') {\r\n    // Remove the unwanted `[`.\r\n    value = value.slice(0, -1)\r\n  } else {\r\n    value += tracker.move(']')\r\n  }\r\n\r\n  return value\r\n}\r\n\r\n/**\r\n * @returns {string}\r\n */\r\nfunction linkReferencePeek() {\r\n  return '['\r\n}\r\n", "/**\r\n * @typedef {import('../types.js').Options} Options\r\n * @typedef {import('../types.js').State} State\r\n */\r\n\r\n/**\r\n * @param {State} state\r\n * @returns {Exclude<Options['bullet'], null | undefined>}\r\n */\r\nexport function checkBullet(state) {\r\n  const marker = state.options.bullet || '*'\r\n\r\n  if (marker !== '*' && marker !== '+' && marker !== '-') {\r\n    throw new Error(\r\n      'Cannot serialize items with `' +\r\n        marker +\r\n        '` for `options.bullet`, expected `*`, `+`, or `-`'\r\n    )\r\n  }\r\n\r\n  return marker\r\n}\r\n", "/**\r\n * @typedef {import('../types.js').Options} Options\r\n * @typedef {import('../types.js').State} State\r\n */\r\n\r\nimport {checkBullet} from './check-bullet.js'\r\n\r\n/**\r\n * @param {State} state\r\n * @returns {Exclude<Options['bullet'], null | undefined>}\r\n */\r\nexport function checkBulletOther(state) {\r\n  const bullet = checkBullet(state)\r\n  const bulletOther = state.options.bulletOther\r\n\r\n  if (!bulletOther) {\r\n    return bullet === '*' ? '-' : '*'\r\n  }\r\n\r\n  if (bulletOther !== '*' && bulletOther !== '+' && bulletOther !== '-') {\r\n    throw new Error(\r\n      'Cannot serialize items with `' +\r\n        bulletOther +\r\n        '` for `options.bulletOther`, expected `*`, `+`, or `-`'\r\n    )\r\n  }\r\n\r\n  if (bulletOther === bullet) {\r\n    throw new Error(\r\n      'Expected `bullet` (`' +\r\n        bullet +\r\n        '`) and `bulletOther` (`' +\r\n        bulletOther +\r\n        '`) to be different'\r\n    )\r\n  }\r\n\r\n  return bulletOther\r\n}\r\n", "/**\r\n * @typedef {import('../types.js').Options} Options\r\n * @typedef {import('../types.js').State} State\r\n */\r\n\r\n/**\r\n * @param {State} state\r\n * @returns {Exclude<Options['bulletOrdered'], null | undefined>}\r\n */\r\nexport function checkBulletOrdered(state) {\r\n  const marker = state.options.bulletOrdered || '.'\r\n\r\n  if (marker !== '.' && marker !== ')') {\r\n    throw new Error(\r\n      'Cannot serialize items with `' +\r\n        marker +\r\n        '` for `options.bulletOrdered`, expected `.` or `)`'\r\n    )\r\n  }\r\n\r\n  return marker\r\n}\r\n", "/**\r\n * @typedef {import('../types.js').Options} Options\r\n * @typedef {import('../types.js').State} State\r\n */\r\n\r\n/**\r\n * @param {State} state\r\n * @returns {Exclude<Options['rule'], null | undefined>}\r\n */\r\nexport function checkRule(state) {\r\n  const marker = state.options.rule || '*'\r\n\r\n  if (marker !== '*' && marker !== '-' && marker !== '_') {\r\n    throw new Error(\r\n      'Cannot serialize rules with `' +\r\n        marker +\r\n        '` for `options.rule`, expected `*`, `-`, or `_`'\r\n    )\r\n  }\r\n\r\n  return marker\r\n}\r\n", "/**\r\n * @typedef {import('mdast').List} List\r\n * @typedef {import('mdast').Parents} Parents\r\n * @typedef {import('../types.js').Info} Info\r\n * @typedef {import('../types.js').State} State\r\n */\r\n\r\nimport {checkBullet} from '../util/check-bullet.js'\r\nimport {checkBulletOther} from '../util/check-bullet-other.js'\r\nimport {checkBulletOrdered} from '../util/check-bullet-ordered.js'\r\nimport {checkRule} from '../util/check-rule.js'\r\n\r\n/**\r\n * @param {List} node\r\n * @param {Parents | undefined} parent\r\n * @param {State} state\r\n * @param {Info} info\r\n * @returns {string}\r\n */\r\nexport function list(node, parent, state, info) {\r\n  const exit = state.enter('list')\r\n  const bulletCurrent = state.bulletCurrent\r\n  /** @type {string} */\r\n  let bullet = node.ordered ? checkBulletOrdered(state) : checkBullet(state)\r\n  /** @type {string} */\r\n  const bulletOther = node.ordered\r\n    ? bullet === '.'\r\n      ? ')'\r\n      : '.'\r\n    : checkBulletOther(state)\r\n  let useDifferentMarker =\r\n    parent && state.bulletLastUsed ? bullet === state.bulletLastUsed : false\r\n\r\n  if (!node.ordered) {\r\n    const firstListItem = node.children ? node.children[0] : undefined\r\n\r\n    // If there’s an empty first list item directly in two list items,\r\n    // we have to use a different bullet:\r\n    //\r\n    // ```markdown\r\n    // * - *\r\n    // ```\r\n    //\r\n    // …because otherwise it would become one big thematic break.\r\n    if (\r\n      // Bullet could be used as a thematic break marker:\r\n      (bullet === '*' || bullet === '-') &&\r\n      // Empty first list item:\r\n      firstListItem &&\r\n      (!firstListItem.children || !firstListItem.children[0]) &&\r\n      // Directly in two other list items:\r\n      state.stack[state.stack.length - 1] === 'list' &&\r\n      state.stack[state.stack.length - 2] === 'listItem' &&\r\n      state.stack[state.stack.length - 3] === 'list' &&\r\n      state.stack[state.stack.length - 4] === 'listItem' &&\r\n      // That are each the first child.\r\n      state.indexStack[state.indexStack.length - 1] === 0 &&\r\n      state.indexStack[state.indexStack.length - 2] === 0 &&\r\n      state.indexStack[state.indexStack.length - 3] === 0\r\n    ) {\r\n      useDifferentMarker = true\r\n    }\r\n\r\n    // If there’s a thematic break at the start of the first list item,\r\n    // we have to use a different bullet:\r\n    //\r\n    // ```markdown\r\n    // * ---\r\n    // ```\r\n    //\r\n    // …because otherwise it would become one big thematic break.\r\n    if (checkRule(state) === bullet && firstListItem) {\r\n      let index = -1\r\n\r\n      while (++index < node.children.length) {\r\n        const item = node.children[index]\r\n\r\n        if (\r\n          item &&\r\n          item.type === 'listItem' &&\r\n          item.children &&\r\n          item.children[0] &&\r\n          item.children[0].type === 'thematicBreak'\r\n        ) {\r\n          useDifferentMarker = true\r\n          break\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  if (useDifferentMarker) {\r\n    bullet = bulletOther\r\n  }\r\n\r\n  state.bulletCurrent = bullet\r\n  const value = state.containerFlow(node, info)\r\n  state.bulletLastUsed = bullet\r\n  state.bulletCurrent = bulletCurrent\r\n  exit()\r\n  return value\r\n}\r\n", "/**\r\n * @typedef {import('../types.js').Options} Options\r\n * @typedef {import('../types.js').State} State\r\n */\r\n\r\n/**\r\n * @param {State} state\r\n * @returns {Exclude<Options['listItemIndent'], null | undefined>}\r\n */\r\nexport function checkListItemIndent(state) {\r\n  const style = state.options.listItemIndent || 'one'\r\n\r\n  if (style !== 'tab' && style !== 'one' && style !== 'mixed') {\r\n    throw new Error(\r\n      'Cannot serialize items with `' +\r\n        style +\r\n        '` for `options.listItemIndent`, expected `tab`, `one`, or `mixed`'\r\n    )\r\n  }\r\n\r\n  return style\r\n}\r\n", "/**\r\n * @typedef {import('mdast').ListItem} ListItem\r\n * @typedef {import('mdast').Parents} Parents\r\n * @typedef {import('../types.js').Info} Info\r\n * @typedef {import('../types.js').Map} Map\r\n * @typedef {import('../types.js').State} State\r\n */\r\n\r\nimport {checkBullet} from '../util/check-bullet.js'\r\nimport {checkListItemIndent} from '../util/check-list-item-indent.js'\r\n\r\n/**\r\n * @param {ListItem} node\r\n * @param {Parents | undefined} parent\r\n * @param {State} state\r\n * @param {Info} info\r\n * @returns {string}\r\n */\r\nexport function listItem(node, parent, state, info) {\r\n  const listItemIndent = checkListItemIndent(state)\r\n  let bullet = state.bulletCurrent || checkBullet(state)\r\n\r\n  // Add the marker value for ordered lists.\r\n  if (parent && parent.type === 'list' && parent.ordered) {\r\n    bullet =\r\n      (typeof parent.start === 'number' && parent.start > -1\r\n        ? parent.start\r\n        : 1) +\r\n      (state.options.incrementListMarker === false\r\n        ? 0\r\n        : parent.children.indexOf(node)) +\r\n      bullet\r\n  }\r\n\r\n  let size = bullet.length + 1\r\n\r\n  if (\r\n    listItemIndent === 'tab' ||\r\n    (listItemIndent === 'mixed' &&\r\n      ((parent && parent.type === 'list' && parent.spread) || node.spread))\r\n  ) {\r\n    size = Math.ceil(size / 4) * 4\r\n  }\r\n\r\n  const tracker = state.createTracker(info)\r\n  tracker.move(bullet + ' '.repeat(size - bullet.length))\r\n  tracker.shift(size)\r\n  const exit = state.enter('listItem')\r\n  const value = state.indentLines(\r\n    state.containerFlow(node, tracker.current()),\r\n    map\r\n  )\r\n  exit()\r\n\r\n  return value\r\n\r\n  /** @type {Map} */\r\n  function map(line, index, blank) {\r\n    if (index) {\r\n      return (blank ? '' : ' '.repeat(size)) + line\r\n    }\r\n\r\n    return (blank ? bullet : bullet + ' '.repeat(size - bullet.length)) + line\r\n  }\r\n}\r\n", "/**\r\n * @typedef {import('mdast').Paragraph} Paragraph\r\n * @typedef {import('mdast').Parents} Parents\r\n * @typedef {import('../types.js').Info} Info\r\n * @typedef {import('../types.js').State} State\r\n */\r\n\r\n/**\r\n * @param {Paragraph} node\r\n * @param {Parents | undefined} _\r\n * @param {State} state\r\n * @param {Info} info\r\n * @returns {string}\r\n */\r\nexport function paragraph(node, _, state, info) {\r\n  const exit = state.enter('paragraph')\r\n  const subexit = state.enter('phrasing')\r\n  const value = state.containerPhrasing(node, info)\r\n  subexit()\r\n  exit()\r\n  return value\r\n}\r\n", "/**\r\n * @typedef {import('mdast').Html} Html\r\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\r\n */\r\n\r\nimport {convert} from 'unist-util-is'\r\n\r\n/**\r\n * Check if the given value is *phrasing content*.\r\n *\r\n * > 👉 **Note**: Excludes `html`, which can be both phrasing or flow.\r\n *\r\n * @param node\r\n *   Thing to check, typically `Node`.\r\n * @returns\r\n *   Whether `value` is phrasing content.\r\n */\r\n\r\nexport const phrasing =\r\n  /** @type {(node?: unknown) => node is Exclude<PhrasingContent, Html>} */\r\n  (\r\n    convert([\r\n      'break',\r\n      'delete',\r\n      'emphasis',\r\n      // To do: next major: removed since footnotes were added to GFM.\r\n      'footnote',\r\n      'footnoteReference',\r\n      'image',\r\n      'imageReference',\r\n      'inlineCode',\r\n      // Enabled by `mdast-util-math`:\r\n      'inlineMath',\r\n      'link',\r\n      'linkReference',\r\n      // Enabled by `mdast-util-mdx`:\r\n      'mdxJsxTextElement',\r\n      // Enabled by `mdast-util-mdx`:\r\n      'mdxTextExpression',\r\n      'strong',\r\n      'text',\r\n      // Enabled by `mdast-util-directive`:\r\n      'textDirective'\r\n    ])\r\n  )\r\n", "/**\r\n * @typedef {import('mdast').Parents} Parents\r\n * @typedef {import('mdast').Root} Root\r\n * @typedef {import('../types.js').Info} Info\r\n * @typedef {import('../types.js').State} State\r\n */\r\n\r\nimport {phrasing} from 'mdast-util-phrasing'\r\n\r\n/**\r\n * @param {Root} node\r\n * @param {Parents | undefined} _\r\n * @param {State} state\r\n * @param {Info} info\r\n * @returns {string}\r\n */\r\nexport function root(node, _, state, info) {\r\n  // Note: `html` nodes are ambiguous.\r\n  const hasPhrasing = node.children.some(function (d) {\r\n    return phrasing(d)\r\n  })\r\n  const fn = hasPhrasing ? state.containerPhrasing : state.containerFlow\r\n  return fn.call(state, node, info)\r\n}\r\n", "/**\r\n * @typedef {import('../types.js').Options} Options\r\n * @typedef {import('../types.js').State} State\r\n */\r\n\r\n/**\r\n * @param {State} state\r\n * @returns {Exclude<Options['strong'], null | undefined>}\r\n */\r\nexport function checkStrong(state) {\r\n  const marker = state.options.strong || '*'\r\n\r\n  if (marker !== '*' && marker !== '_') {\r\n    throw new Error(\r\n      'Cannot serialize strong with `' +\r\n        marker +\r\n        '` for `options.strong`, expected `*`, or `_`'\r\n    )\r\n  }\r\n\r\n  return marker\r\n}\r\n", "/**\r\n * @typedef {import('mdast').Parents} Parents\r\n * @typedef {import('mdast').Strong} Strong\r\n * @typedef {import('../types.js').Info} Info\r\n * @typedef {import('../types.js').State} State\r\n */\r\n\r\nimport {checkStrong} from '../util/check-strong.js'\r\n\r\nstrong.peek = strongPeek\r\n\r\n// To do: there are cases where emphasis cannot “form” depending on the\r\n// previous or next character of sequences.\r\n// There’s no way around that though, except for injecting zero-width stuff.\r\n// Do we need to safeguard against that?\r\n/**\r\n * @param {Strong} node\r\n * @param {Parents | undefined} _\r\n * @param {State} state\r\n * @param {Info} info\r\n * @returns {string}\r\n */\r\nexport function strong(node, _, state, info) {\r\n  const marker = checkStrong(state)\r\n  const exit = state.enter('strong')\r\n  const tracker = state.createTracker(info)\r\n  let value = tracker.move(marker + marker)\r\n  value += tracker.move(\r\n    state.containerPhrasing(node, {\r\n      before: value,\r\n      after: marker,\r\n      ...tracker.current()\r\n    })\r\n  )\r\n  value += tracker.move(marker + marker)\r\n  exit()\r\n  return value\r\n}\r\n\r\n/**\r\n * @param {Strong} _\r\n * @param {Parents | undefined} _1\r\n * @param {State} state\r\n * @returns {string}\r\n */\r\nfunction strongPeek(_, _1, state) {\r\n  return state.options.strong || '*'\r\n}\r\n", "/**\r\n * @typedef {import('mdast').Parents} Parents\r\n * @typedef {import('mdast').Text} Text\r\n * @typedef {import('../types.js').Info} Info\r\n * @typedef {import('../types.js').State} State\r\n */\r\n\r\n/**\r\n * @param {Text} node\r\n * @param {Parents | undefined} _\r\n * @param {State} state\r\n * @param {Info} info\r\n * @returns {string}\r\n */\r\nexport function text(node, _, state, info) {\r\n  return state.safe(node.value, info)\r\n}\r\n", "/**\r\n * @typedef {import('../types.js').Options} Options\r\n * @typedef {import('../types.js').State} State\r\n */\r\n\r\n/**\r\n * @param {State} state\r\n * @returns {Exclude<Options['ruleRepetition'], null | undefined>}\r\n */\r\nexport function checkRuleRepetition(state) {\r\n  const repetition = state.options.ruleRepetition || 3\r\n\r\n  if (repetition < 3) {\r\n    throw new Error(\r\n      'Cannot serialize rules with repetition `' +\r\n        repetition +\r\n        '` for `options.ruleRepetition`, expected `3` or more'\r\n    )\r\n  }\r\n\r\n  return repetition\r\n}\r\n", "/**\r\n * @typedef {import('mdast').Parents} Parents\r\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\r\n * @typedef {import('../types.js').State} State\r\n */\r\n\r\nimport {checkRuleRepetition} from '../util/check-rule-repetition.js'\r\nimport {checkRule} from '../util/check-rule.js'\r\n\r\n/**\r\n * @param {ThematicBreak} _\r\n * @param {Parents | undefined} _1\r\n * @param {State} state\r\n * @returns {string}\r\n */\r\nexport function thematicBreak(_, _1, state) {\r\n  const value = (\r\n    checkRule(state) + (state.options.ruleSpaces ? ' ' : '')\r\n  ).repeat(checkRuleRepetition(state))\r\n\r\n  return state.options.ruleSpaces ? value.slice(0, -1) : value\r\n}\r\n", "import {blockquote} from './blockquote.js'\r\nimport {hardBreak} from './break.js'\r\nimport {code} from './code.js'\r\nimport {definition} from './definition.js'\r\nimport {emphasis} from './emphasis.js'\r\nimport {heading} from './heading.js'\r\nimport {html} from './html.js'\r\nimport {image} from './image.js'\r\nimport {imageReference} from './image-reference.js'\r\nimport {inlineCode} from './inline-code.js'\r\nimport {link} from './link.js'\r\nimport {linkReference} from './link-reference.js'\r\nimport {list} from './list.js'\r\nimport {listItem} from './list-item.js'\r\nimport {paragraph} from './paragraph.js'\r\nimport {root} from './root.js'\r\nimport {strong} from './strong.js'\r\nimport {text} from './text.js'\r\nimport {thematicBreak} from './thematic-break.js'\r\n\r\n/**\r\n * Default (CommonMark) handlers.\r\n */\r\nexport const handle = {\r\n  blockquote,\r\n  break: hardBreak,\r\n  code,\r\n  definition,\r\n  emphasis,\r\n  hardBreak,\r\n  heading,\r\n  html,\r\n  image,\r\n  imageReference,\r\n  inlineCode,\r\n  link,\r\n  linkReference,\r\n  list,\r\n  listItem,\r\n  paragraph,\r\n  root,\r\n  strong,\r\n  text,\r\n  thematicBreak\r\n}\r\n", "/**\r\n * @typedef {import('./types.js').Options} Options\r\n * @typedef {import('./types.js').State} State\r\n */\r\n\r\nconst own = {}.hasOwnProperty\r\n\r\n/**\r\n * @param {State} base\r\n * @param {Options} extension\r\n * @returns {State}\r\n */\r\nexport function configure(base, extension) {\r\n  let index = -1\r\n  /** @type {keyof Options} */\r\n  let key\r\n\r\n  // First do subextensions.\r\n  if (extension.extensions) {\r\n    while (++index < extension.extensions.length) {\r\n      configure(base, extension.extensions[index])\r\n    }\r\n  }\r\n\r\n  for (key in extension) {\r\n    if (own.call(extension, key)) {\r\n      switch (key) {\r\n        case 'extensions': {\r\n          // Empty.\r\n          break\r\n        }\r\n\r\n        /* c8 ignore next 4 */\r\n        case 'unsafe': {\r\n          list(base[key], extension[key])\r\n          break\r\n        }\r\n\r\n        case 'join': {\r\n          list(base[key], extension[key])\r\n          break\r\n        }\r\n\r\n        case 'handlers': {\r\n          map(base[key], extension[key])\r\n          break\r\n        }\r\n\r\n        default: {\r\n          // @ts-expect-error: matches.\r\n          base.options[key] = extension[key]\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return base\r\n}\r\n\r\n/**\r\n * @template T\r\n * @param {Array<T>} left\r\n * @param {Array<T> | null | undefined} right\r\n */\r\nfunction list(left, right) {\r\n  if (right) {\r\n    left.push(...right)\r\n  }\r\n}\r\n\r\n/**\r\n * @template T\r\n * @param {Record<string, T>} left\r\n * @param {Record<string, T> | null | undefined} right\r\n */\r\nfunction map(left, right) {\r\n  if (right) {\r\n    Object.assign(left, right)\r\n  }\r\n}\r\n", "/// <reference lib=\"dom\" />\r\n\r\n/* eslint-env browser */\r\n\r\nconst element = document.createElement('i')\r\n\r\n/**\r\n * @param {string} value\r\n * @returns {string|false}\r\n */\r\nexport function decodeNamedCharacterReference(value) {\r\n  const characterReference = '&' + value + ';'\r\n  element.innerHTML = characterReference\r\n  const char = element.textContent\r\n\r\n  // Some named character references do not require the closing semicolon\r\n  // (`&not`, for instance), which leads to situations where parsing the assumed\r\n  // named reference of `&notit;` will result in the string `¬it;`.\r\n  // When we encounter a trailing semicolon after parsing, and the character\r\n  // reference to decode was not a semicolon (`&semi;`), we can assume that the\r\n  // matching was not complete.\r\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\r\n  // yield `null`.\r\n  if (char.charCodeAt(char.length - 1) === 59 /* `;` */ && value !== 'semi') {\r\n    return false\r\n  }\r\n\r\n  // If the decoded string is equal to the input, the character reference was\r\n  // not valid.\r\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\r\n  // yield `null`.\r\n  return char === characterReference ? false : char\r\n}\r\n", "/**\r\n * @typedef {import('micromark-util-types').Effects} Effects\r\n * @typedef {import('micromark-util-types').State} State\r\n * @typedef {import('micromark-util-types').TokenType} TokenType\r\n */\r\n\r\nimport {markdownSpace} from 'micromark-util-character'\r\n\r\n// To do: implement `spaceOrTab`, `spaceOrTabMinMax`, `spaceOrTabWithOptions`.\r\n\r\n/**\r\n * Parse spaces and tabs.\r\n *\r\n * There is no `nok` parameter:\r\n *\r\n * *   spaces in markdown are often optional, in which case this factory can be\r\n *     used and `ok` will be switched to whether spaces were found or not\r\n * *   one line ending or space can be detected with `markdownSpace(code)` right\r\n *     before using `factorySpace`\r\n *\r\n * ###### Examples\r\n *\r\n * Where `␉` represents a tab (plus how much it expands) and `␠` represents a\r\n * single space.\r\n *\r\n * ```markdown\r\n * ␉\r\n * ␠␠␠␠\r\n * ␉␠\r\n * ```\r\n *\r\n * @param {Effects} effects\r\n *   Context.\r\n * @param {State} ok\r\n *   State switched to when successful.\r\n * @param {TokenType} type\r\n *   Type (`' \\t'`).\r\n * @param {number | undefined} [max=Infinity]\r\n *   Max (exclusive).\r\n * @returns {State}\r\n *   Start state.\r\n */\r\nexport function factorySpace(effects, ok, type, max) {\r\n  const limit = max ? max - 1 : Number.POSITIVE_INFINITY\r\n  let size = 0\r\n\r\n  return start\r\n\r\n  /** @type {State} */\r\n  function start(code) {\r\n    if (markdownSpace(code)) {\r\n      effects.enter(type)\r\n      return prefix(code)\r\n    }\r\n\r\n    return ok(code)\r\n  }\r\n\r\n  /** @type {State} */\r\n  function prefix(code) {\r\n    if (markdownSpace(code) && size++ < limit) {\r\n      effects.consume(code)\r\n      return prefix\r\n    }\r\n\r\n    effects.exit(type)\r\n    return ok(code)\r\n  }\r\n}\r\n", "/**\r\n * @typedef {import('micromark-util-types').Code} Code\r\n * @typedef {import('micromark-util-types').Construct} Construct\r\n * @typedef {import('micromark-util-types').State} State\r\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\r\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\r\n */\r\n\r\nimport {factorySpace} from 'micromark-factory-space'\r\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\r\nimport {codes, constants, types} from 'micromark-util-symbol'\r\nimport {ok as assert} from 'devlop'\r\n\r\n/** @type {Construct} */\r\nconst nonLazyContinuation = {\r\n  tokenize: tokenizeNonLazyContinuation,\r\n  partial: true\r\n}\r\n\r\n/** @type {Construct} */\r\nexport const codeFenced = {\r\n  name: 'codeFenced',\r\n  tokenize: tokenizeCodeFenced,\r\n  concrete: true\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeCodeFenced(effects, ok, nok) {\r\n  const self = this\r\n  /** @type {Construct} */\r\n  const closeStart = {tokenize: tokenizeCloseStart, partial: true}\r\n  let initialPrefix = 0\r\n  let sizeOpen = 0\r\n  /** @type {NonNullable<Code>} */\r\n  let marker\r\n\r\n  return start\r\n\r\n  /**\r\n   * Start of code.\r\n   *\r\n   * ```markdown\r\n   * > | ~~~js\r\n   *     ^\r\n   *   | alert(1)\r\n   *   | ~~~\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function start(code) {\r\n    // To do: parse whitespace like `markdown-rs`.\r\n    return beforeSequenceOpen(code)\r\n  }\r\n\r\n  /**\r\n   * In opening fence, after prefix, at sequence.\r\n   *\r\n   * ```markdown\r\n   * > | ~~~js\r\n   *     ^\r\n   *   | alert(1)\r\n   *   | ~~~\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function beforeSequenceOpen(code) {\r\n    assert(\r\n      code === codes.graveAccent || code === codes.tilde,\r\n      'expected `` ` `` or `~`'\r\n    )\r\n\r\n    const tail = self.events[self.events.length - 1]\r\n    initialPrefix =\r\n      tail && tail[1].type === types.linePrefix\r\n        ? tail[2].sliceSerialize(tail[1], true).length\r\n        : 0\r\n\r\n    marker = code\r\n    effects.enter(types.codeFenced)\r\n    effects.enter(types.codeFencedFence)\r\n    effects.enter(types.codeFencedFenceSequence)\r\n    return sequenceOpen(code)\r\n  }\r\n\r\n  /**\r\n   * In opening fence sequence.\r\n   *\r\n   * ```markdown\r\n   * > | ~~~js\r\n   *      ^\r\n   *   | alert(1)\r\n   *   | ~~~\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function sequenceOpen(code) {\r\n    if (code === marker) {\r\n      sizeOpen++\r\n      effects.consume(code)\r\n      return sequenceOpen\r\n    }\r\n\r\n    if (sizeOpen < constants.codeFencedSequenceSizeMin) {\r\n      return nok(code)\r\n    }\r\n\r\n    effects.exit(types.codeFencedFenceSequence)\r\n    return markdownSpace(code)\r\n      ? factorySpace(effects, infoBefore, types.whitespace)(code)\r\n      : infoBefore(code)\r\n  }\r\n\r\n  /**\r\n   * In opening fence, after the sequence (and optional whitespace), before info.\r\n   *\r\n   * ```markdown\r\n   * > | ~~~js\r\n   *        ^\r\n   *   | alert(1)\r\n   *   | ~~~\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function infoBefore(code) {\r\n    if (code === codes.eof || markdownLineEnding(code)) {\r\n      effects.exit(types.codeFencedFence)\r\n      return self.interrupt\r\n        ? ok(code)\r\n        : effects.check(nonLazyContinuation, atNonLazyBreak, after)(code)\r\n    }\r\n\r\n    effects.enter(types.codeFencedFenceInfo)\r\n    effects.enter(types.chunkString, {contentType: constants.contentTypeString})\r\n    return info(code)\r\n  }\r\n\r\n  /**\r\n   * In info.\r\n   *\r\n   * ```markdown\r\n   * > | ~~~js\r\n   *        ^\r\n   *   | alert(1)\r\n   *   | ~~~\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function info(code) {\r\n    if (code === codes.eof || markdownLineEnding(code)) {\r\n      effects.exit(types.chunkString)\r\n      effects.exit(types.codeFencedFenceInfo)\r\n      return infoBefore(code)\r\n    }\r\n\r\n    if (markdownSpace(code)) {\r\n      effects.exit(types.chunkString)\r\n      effects.exit(types.codeFencedFenceInfo)\r\n      return factorySpace(effects, metaBefore, types.whitespace)(code)\r\n    }\r\n\r\n    if (code === codes.graveAccent && code === marker) {\r\n      return nok(code)\r\n    }\r\n\r\n    effects.consume(code)\r\n    return info\r\n  }\r\n\r\n  /**\r\n   * In opening fence, after info and whitespace, before meta.\r\n   *\r\n   * ```markdown\r\n   * > | ~~~js eval\r\n   *           ^\r\n   *   | alert(1)\r\n   *   | ~~~\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function metaBefore(code) {\r\n    if (code === codes.eof || markdownLineEnding(code)) {\r\n      return infoBefore(code)\r\n    }\r\n\r\n    effects.enter(types.codeFencedFenceMeta)\r\n    effects.enter(types.chunkString, {contentType: constants.contentTypeString})\r\n    return meta(code)\r\n  }\r\n\r\n  /**\r\n   * In meta.\r\n   *\r\n   * ```markdown\r\n   * > | ~~~js eval\r\n   *           ^\r\n   *   | alert(1)\r\n   *   | ~~~\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function meta(code) {\r\n    if (code === codes.eof || markdownLineEnding(code)) {\r\n      effects.exit(types.chunkString)\r\n      effects.exit(types.codeFencedFenceMeta)\r\n      return infoBefore(code)\r\n    }\r\n\r\n    if (code === codes.graveAccent && code === marker) {\r\n      return nok(code)\r\n    }\r\n\r\n    effects.consume(code)\r\n    return meta\r\n  }\r\n\r\n  /**\r\n   * At eol/eof in code, before a non-lazy closing fence or content.\r\n   *\r\n   * ```markdown\r\n   * > | ~~~js\r\n   *          ^\r\n   * > | alert(1)\r\n   *             ^\r\n   *   | ~~~\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function atNonLazyBreak(code) {\r\n    assert(markdownLineEnding(code), 'expected eol')\r\n    return effects.attempt(closeStart, after, contentBefore)(code)\r\n  }\r\n\r\n  /**\r\n   * Before code content, not a closing fence, at eol.\r\n   *\r\n   * ```markdown\r\n   *   | ~~~js\r\n   * > | alert(1)\r\n   *             ^\r\n   *   | ~~~\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function contentBefore(code) {\r\n    assert(markdownLineEnding(code), 'expected eol')\r\n    effects.enter(types.lineEnding)\r\n    effects.consume(code)\r\n    effects.exit(types.lineEnding)\r\n    return contentStart\r\n  }\r\n\r\n  /**\r\n   * Before code content, not a closing fence.\r\n   *\r\n   * ```markdown\r\n   *   | ~~~js\r\n   * > | alert(1)\r\n   *     ^\r\n   *   | ~~~\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function contentStart(code) {\r\n    return initialPrefix > 0 && markdownSpace(code)\r\n      ? factorySpace(\r\n          effects,\r\n          beforeContentChunk,\r\n          types.linePrefix,\r\n          initialPrefix + 1\r\n        )(code)\r\n      : beforeContentChunk(code)\r\n  }\r\n\r\n  /**\r\n   * Before code content, after optional prefix.\r\n   *\r\n   * ```markdown\r\n   *   | ~~~js\r\n   * > | alert(1)\r\n   *     ^\r\n   *   | ~~~\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function beforeContentChunk(code) {\r\n    if (code === codes.eof || markdownLineEnding(code)) {\r\n      return effects.check(nonLazyContinuation, atNonLazyBreak, after)(code)\r\n    }\r\n\r\n    effects.enter(types.codeFlowValue)\r\n    return contentChunk(code)\r\n  }\r\n\r\n  /**\r\n   * In code content.\r\n   *\r\n   * ```markdown\r\n   *   | ~~~js\r\n   * > | alert(1)\r\n   *     ^^^^^^^^\r\n   *   | ~~~\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function contentChunk(code) {\r\n    if (code === codes.eof || markdownLineEnding(code)) {\r\n      effects.exit(types.codeFlowValue)\r\n      return beforeContentChunk(code)\r\n    }\r\n\r\n    effects.consume(code)\r\n    return contentChunk\r\n  }\r\n\r\n  /**\r\n   * After code.\r\n   *\r\n   * ```markdown\r\n   *   | ~~~js\r\n   *   | alert(1)\r\n   * > | ~~~\r\n   *        ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function after(code) {\r\n    effects.exit(types.codeFenced)\r\n    return ok(code)\r\n  }\r\n\r\n  /**\r\n   * @this {TokenizeContext}\r\n   * @type {Tokenizer}\r\n   */\r\n  function tokenizeCloseStart(effects, ok, nok) {\r\n    let size = 0\r\n\r\n    return startBefore\r\n\r\n    /**\r\n     *\r\n     *\r\n     * @type {State}\r\n     */\r\n    function startBefore(code) {\r\n      assert(markdownLineEnding(code), 'expected eol')\r\n      effects.enter(types.lineEnding)\r\n      effects.consume(code)\r\n      effects.exit(types.lineEnding)\r\n      return start\r\n    }\r\n\r\n    /**\r\n     * Before closing fence, at optional whitespace.\r\n     *\r\n     * ```markdown\r\n     *   | ~~~js\r\n     *   | alert(1)\r\n     * > | ~~~\r\n     *     ^\r\n     * ```\r\n     *\r\n     * @type {State}\r\n     */\r\n    function start(code) {\r\n      // Always populated by defaults.\r\n      assert(\r\n        self.parser.constructs.disable.null,\r\n        'expected `disable.null` to be populated'\r\n      )\r\n\r\n      // To do: `enter` here or in next state?\r\n      effects.enter(types.codeFencedFence)\r\n      return markdownSpace(code)\r\n        ? factorySpace(\r\n            effects,\r\n            beforeSequenceClose,\r\n            types.linePrefix,\r\n            self.parser.constructs.disable.null.includes('codeIndented')\r\n              ? undefined\r\n              : constants.tabSize\r\n          )(code)\r\n        : beforeSequenceClose(code)\r\n    }\r\n\r\n    /**\r\n     * In closing fence, after optional whitespace, at sequence.\r\n     *\r\n     * ```markdown\r\n     *   | ~~~js\r\n     *   | alert(1)\r\n     * > | ~~~\r\n     *     ^\r\n     * ```\r\n     *\r\n     * @type {State}\r\n     */\r\n    function beforeSequenceClose(code) {\r\n      if (code === marker) {\r\n        effects.enter(types.codeFencedFenceSequence)\r\n        return sequenceClose(code)\r\n      }\r\n\r\n      return nok(code)\r\n    }\r\n\r\n    /**\r\n     * In closing fence sequence.\r\n     *\r\n     * ```markdown\r\n     *   | ~~~js\r\n     *   | alert(1)\r\n     * > | ~~~\r\n     *     ^\r\n     * ```\r\n     *\r\n     * @type {State}\r\n     */\r\n    function sequenceClose(code) {\r\n      if (code === marker) {\r\n        size++\r\n        effects.consume(code)\r\n        return sequenceClose\r\n      }\r\n\r\n      if (size >= sizeOpen) {\r\n        effects.exit(types.codeFencedFenceSequence)\r\n        return markdownSpace(code)\r\n          ? factorySpace(effects, sequenceCloseAfter, types.whitespace)(code)\r\n          : sequenceCloseAfter(code)\r\n      }\r\n\r\n      return nok(code)\r\n    }\r\n\r\n    /**\r\n     * After closing fence sequence, after optional whitespace.\r\n     *\r\n     * ```markdown\r\n     *   | ~~~js\r\n     *   | alert(1)\r\n     * > | ~~~\r\n     *        ^\r\n     * ```\r\n     *\r\n     * @type {State}\r\n     */\r\n    function sequenceCloseAfter(code) {\r\n      if (code === codes.eof || markdownLineEnding(code)) {\r\n        effects.exit(types.codeFencedFence)\r\n        return ok(code)\r\n      }\r\n\r\n      return nok(code)\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeNonLazyContinuation(effects, ok, nok) {\r\n  const self = this\r\n\r\n  return start\r\n\r\n  /**\r\n   *\r\n   *\r\n   * @type {State}\r\n   */\r\n  function start(code) {\r\n    if (code === codes.eof) {\r\n      return nok(code)\r\n    }\r\n\r\n    assert(markdownLineEnding(code), 'expected eol')\r\n    effects.enter(types.lineEnding)\r\n    effects.consume(code)\r\n    effects.exit(types.lineEnding)\r\n    return lineStart\r\n  }\r\n\r\n  /**\r\n   *\r\n   *\r\n   * @type {State}\r\n   */\r\n  function lineStart(code) {\r\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code)\r\n  }\r\n}\r\n", "/**\r\n * @typedef {import('micromark-util-types').Effects} Effects\r\n * @typedef {import('micromark-util-types').State} State\r\n */\r\n\r\nimport {factorySpace} from 'micromark-factory-space'\r\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\r\nimport {types} from 'micromark-util-symbol'\r\n\r\n/**\r\n * Parse spaces and tabs.\r\n *\r\n * There is no `nok` parameter:\r\n *\r\n * *   line endings or spaces in markdown are often optional, in which case this\r\n *     factory can be used and `ok` will be switched to whether spaces were found\r\n *     or not\r\n * *   one line ending or space can be detected with\r\n *     `markdownLineEndingOrSpace(code)` right before using `factoryWhitespace`\r\n *\r\n * @param {Effects} effects\r\n *   Context.\r\n * @param {State} ok\r\n *   State switched to when successful.\r\n * @returns {State}\r\n *   Start state.\r\n */\r\nexport function factoryWhitespace(effects, ok) {\r\n  /** @type {boolean} */\r\n  let seen\r\n\r\n  return start\r\n\r\n  /** @type {State} */\r\n  function start(code) {\r\n    if (markdownLineEnding(code)) {\r\n      effects.enter(types.lineEnding)\r\n      effects.consume(code)\r\n      effects.exit(types.lineEnding)\r\n      seen = true\r\n      return start\r\n    }\r\n\r\n    if (markdownSpace(code)) {\r\n      return factorySpace(\r\n        effects,\r\n        start,\r\n        seen ? types.linePrefix : types.lineSuffix\r\n      )(code)\r\n    }\r\n\r\n    return ok(code)\r\n  }\r\n}\r\n", "import {constants} from 'micromark-util-symbol'\r\n\r\n/**\r\n * Like `Array#splice`, but smarter for giant arrays.\r\n *\r\n * `Array#splice` takes all items to be inserted as individual argument which\r\n * causes a stack overflow in V8 when trying to insert 100k items for instance.\r\n *\r\n * Otherwise, this does not return the removed items, and takes `items` as an\r\n * array instead of rest parameters.\r\n *\r\n * @template {unknown} T\r\n *   Item type.\r\n * @param {Array<T>} list\r\n *   List to operate on.\r\n * @param {number} start\r\n *   Index to remove/insert at (can be negative).\r\n * @param {number} remove\r\n *   Number of items to remove.\r\n * @param {Array<T>} items\r\n *   Items to inject into `list`.\r\n * @returns {undefined}\r\n *   Nothing.\r\n */\r\nexport function splice(list, start, remove, items) {\r\n  const end = list.length\r\n  let chunkStart = 0\r\n  /** @type {Array<unknown>} */\r\n  let parameters\r\n\r\n  // Make start between zero and `end` (included).\r\n  if (start < 0) {\r\n    start = -start > end ? 0 : end + start\r\n  } else {\r\n    start = start > end ? end : start\r\n  }\r\n\r\n  remove = remove > 0 ? remove : 0\r\n\r\n  // No need to chunk the items if there’s only a couple (10k) items.\r\n  if (items.length < constants.v8MaxSafeChunkSize) {\r\n    parameters = Array.from(items)\r\n    parameters.unshift(start, remove)\r\n    // @ts-expect-error Hush, it’s fine.\r\n    list.splice(...parameters)\r\n  } else {\r\n    // Delete `remove` items starting from `start`\r\n    if (remove) list.splice(start, remove)\r\n\r\n    // Insert the items in chunks to not cause stack overflows.\r\n    while (chunkStart < items.length) {\r\n      parameters = items.slice(\r\n        chunkStart,\r\n        chunkStart + constants.v8MaxSafeChunkSize\r\n      )\r\n      parameters.unshift(start, 0)\r\n      // @ts-expect-error Hush, it’s fine.\r\n      list.splice(...parameters)\r\n\r\n      chunkStart += constants.v8MaxSafeChunkSize\r\n      start += constants.v8MaxSafeChunkSize\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Append `items` (an array) at the end of `list` (another array).\r\n * When `list` was empty, returns `items` instead.\r\n *\r\n * This prevents a potentially expensive operation when `list` is empty,\r\n * and adds items in batches to prevent V8 from hanging.\r\n *\r\n * @template {unknown} T\r\n *   Item type.\r\n * @param {Array<T>} list\r\n *   List to operate on.\r\n * @param {Array<T>} items\r\n *   Items to add to `list`.\r\n * @returns {Array<T>}\r\n *   Either `list` or `items`.\r\n */\r\nexport function push(list, items) {\r\n  if (list.length > 0) {\r\n    splice(list, list.length, 0, items)\r\n    return list\r\n  }\r\n\r\n  return items\r\n}\r\n", "/**\r\n * @typedef {import('micromark-util-types').Code} Code\r\n */\r\n\r\nimport {\r\n  markdownLineEndingOrSpace,\r\n  unicodePunctuation,\r\n  unicodeWhitespace\r\n} from 'micromark-util-character'\r\nimport {codes, constants} from 'micromark-util-symbol'\r\n\r\n/**\r\n * Classify whether a code represents whitespace, punctuation, or something\r\n * else.\r\n *\r\n * Used for attention (emphasis, strong), whose sequences can open or close\r\n * based on the class of surrounding characters.\r\n *\r\n * > 👉 **Note**: eof (`null`) is seen as whitespace.\r\n *\r\n * @param {Code} code\r\n *   Code.\r\n * @returns {typeof constants.characterGroupWhitespace | typeof constants.characterGroupPunctuation | undefined}\r\n *   Group.\r\n */\r\nexport function classifyCharacter(code) {\r\n  if (\r\n    code === codes.eof ||\r\n    markdownLineEndingOrSpace(code) ||\r\n    unicodeWhitespace(code)\r\n  ) {\r\n    return constants.characterGroupWhitespace\r\n  }\r\n\r\n  if (unicodePunctuation(code)) {\r\n    return constants.characterGroupPunctuation\r\n  }\r\n}\r\n", "/**\r\n * @typedef {import('micromark-util-types').Event} Event\r\n * @typedef {import('micromark-util-types').Resolver} Resolver\r\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\r\n */\r\n\r\n/**\r\n * Call all `resolveAll`s.\r\n *\r\n * @param {Array<{resolveAll?: Resolver | undefined}>} constructs\r\n *   List of constructs, optionally with `resolveAll`s.\r\n * @param {Array<Event>} events\r\n *   List of events.\r\n * @param {TokenizeContext} context\r\n *   Context used by `tokenize`.\r\n * @returns {Array<Event>}\r\n *   Changed events.\r\n */\r\nexport function resolveAll(constructs, events, context) {\r\n  /** @type {Array<Resolver>} */\r\n  const called = []\r\n  let index = -1\r\n\r\n  while (++index < constructs.length) {\r\n    const resolve = constructs[index].resolveAll\r\n\r\n    if (resolve && !called.includes(resolve)) {\r\n      events = resolve(events, context)\r\n      called.push(resolve)\r\n    }\r\n  }\r\n\r\n  return events\r\n}\r\n", "/**\r\n * @typedef {import('micromark-util-types').Construct} Construct\r\n * @typedef {import('micromark-util-types').State} State\r\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\r\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\r\n */\r\n\r\nimport {factorySpace} from 'micromark-factory-space'\r\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\r\nimport {codes, types} from 'micromark-util-symbol'\r\n\r\n/** @type {Construct} */\r\nexport const blankLine = {tokenize: tokenizeBlankLine, partial: true}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeBlankLine(effects, ok, nok) {\r\n  return start\r\n\r\n  /**\r\n   * Start of blank line.\r\n   *\r\n   * > 👉 **Note**: `␠` represents a space character.\r\n   *\r\n   * ```markdown\r\n   * > | ␠␠␊\r\n   *     ^\r\n   * > | ␊\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function start(code) {\r\n    return markdownSpace(code)\r\n      ? factorySpace(effects, after, types.linePrefix)(code)\r\n      : after(code)\r\n  }\r\n\r\n  /**\r\n   * At eof/eol, after optional whitespace.\r\n   *\r\n   * > 👉 **Note**: `␠` represents a space character.\r\n   *\r\n   * ```markdown\r\n   * > | ␠␠␊\r\n   *       ^\r\n   * > | ␊\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function after(code) {\r\n    return code === codes.eof || markdownLineEnding(code) ? ok(code) : nok(code)\r\n  }\r\n}\r\n", "/**\r\n * @typedef {import('micromark-util-types').Effects} Effects\r\n * @typedef {import('micromark-util-types').State} State\r\n * @typedef {import('micromark-util-types').TokenType} TokenType\r\n */\r\n\r\nimport {\r\n  asciiControl,\r\n  markdownLineEndingOrSpace,\r\n  markdownLineEnding\r\n} from 'micromark-util-character'\r\nimport {codes, constants, types} from 'micromark-util-symbol'\r\n\r\n/**\r\n * Parse destinations.\r\n *\r\n * ###### Examples\r\n *\r\n * ```markdown\r\n * <a>\r\n * <a\\>b>\r\n * <a b>\r\n * <a)>\r\n * a\r\n * a\\)b\r\n * a(b)c\r\n * a(b)\r\n * ```\r\n *\r\n * @param {Effects} effects\r\n *   Context.\r\n * @param {State} ok\r\n *   State switched to when successful.\r\n * @param {State} nok\r\n *   State switched to when unsuccessful.\r\n * @param {TokenType} type\r\n *   Type for whole (`<a>` or `b`).\r\n * @param {TokenType} literalType\r\n *   Type when enclosed (`<a>`).\r\n * @param {TokenType} literalMarkerType\r\n *   Type for enclosing (`<` and `>`).\r\n * @param {TokenType} rawType\r\n *   Type when not enclosed (`b`).\r\n * @param {TokenType} stringType\r\n *   Type for the value (`a` or `b`).\r\n * @param {number | undefined} [max=Infinity]\r\n *   Depth of nested parens (inclusive).\r\n * @returns {State}\r\n *   Start state.\r\n */\r\n// eslint-disable-next-line max-params\r\nexport function factoryDestination(\r\n  effects,\r\n  ok,\r\n  nok,\r\n  type,\r\n  literalType,\r\n  literalMarkerType,\r\n  rawType,\r\n  stringType,\r\n  max\r\n) {\r\n  const limit = max || Number.POSITIVE_INFINITY\r\n  let balance = 0\r\n\r\n  return start\r\n\r\n  /**\r\n   * Start of destination.\r\n   *\r\n   * ```markdown\r\n   * > | <aa>\r\n   *     ^\r\n   * > | aa\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function start(code) {\r\n    if (code === codes.lessThan) {\r\n      effects.enter(type)\r\n      effects.enter(literalType)\r\n      effects.enter(literalMarkerType)\r\n      effects.consume(code)\r\n      effects.exit(literalMarkerType)\r\n      return enclosedBefore\r\n    }\r\n\r\n    // ASCII control, space, closing paren.\r\n    if (\r\n      code === codes.eof ||\r\n      code === codes.space ||\r\n      code === codes.rightParenthesis ||\r\n      asciiControl(code)\r\n    ) {\r\n      return nok(code)\r\n    }\r\n\r\n    effects.enter(type)\r\n    effects.enter(rawType)\r\n    effects.enter(stringType)\r\n    effects.enter(types.chunkString, {contentType: constants.contentTypeString})\r\n    return raw(code)\r\n  }\r\n\r\n  /**\r\n   * After `<`, at an enclosed destination.\r\n   *\r\n   * ```markdown\r\n   * > | <aa>\r\n   *      ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function enclosedBefore(code) {\r\n    if (code === codes.greaterThan) {\r\n      effects.enter(literalMarkerType)\r\n      effects.consume(code)\r\n      effects.exit(literalMarkerType)\r\n      effects.exit(literalType)\r\n      effects.exit(type)\r\n      return ok\r\n    }\r\n\r\n    effects.enter(stringType)\r\n    effects.enter(types.chunkString, {contentType: constants.contentTypeString})\r\n    return enclosed(code)\r\n  }\r\n\r\n  /**\r\n   * In enclosed destination.\r\n   *\r\n   * ```markdown\r\n   * > | <aa>\r\n   *      ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function enclosed(code) {\r\n    if (code === codes.greaterThan) {\r\n      effects.exit(types.chunkString)\r\n      effects.exit(stringType)\r\n      return enclosedBefore(code)\r\n    }\r\n\r\n    if (\r\n      code === codes.eof ||\r\n      code === codes.lessThan ||\r\n      markdownLineEnding(code)\r\n    ) {\r\n      return nok(code)\r\n    }\r\n\r\n    effects.consume(code)\r\n    return code === codes.backslash ? enclosedEscape : enclosed\r\n  }\r\n\r\n  /**\r\n   * After `\\`, at a special character.\r\n   *\r\n   * ```markdown\r\n   * > | <a\\*a>\r\n   *        ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function enclosedEscape(code) {\r\n    if (\r\n      code === codes.lessThan ||\r\n      code === codes.greaterThan ||\r\n      code === codes.backslash\r\n    ) {\r\n      effects.consume(code)\r\n      return enclosed\r\n    }\r\n\r\n    return enclosed(code)\r\n  }\r\n\r\n  /**\r\n   * In raw destination.\r\n   *\r\n   * ```markdown\r\n   * > | aa\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function raw(code) {\r\n    if (\r\n      !balance &&\r\n      (code === codes.eof ||\r\n        code === codes.rightParenthesis ||\r\n        markdownLineEndingOrSpace(code))\r\n    ) {\r\n      effects.exit(types.chunkString)\r\n      effects.exit(stringType)\r\n      effects.exit(rawType)\r\n      effects.exit(type)\r\n      return ok(code)\r\n    }\r\n\r\n    if (balance < limit && code === codes.leftParenthesis) {\r\n      effects.consume(code)\r\n      balance++\r\n      return raw\r\n    }\r\n\r\n    if (code === codes.rightParenthesis) {\r\n      effects.consume(code)\r\n      balance--\r\n      return raw\r\n    }\r\n\r\n    // ASCII control (but *not* `\\0`) and space and `(`.\r\n    // Note: in `markdown-rs`, `\\0` exists in codes, in `micromark-js` it\r\n    // doesn’t.\r\n    if (\r\n      code === codes.eof ||\r\n      code === codes.space ||\r\n      code === codes.leftParenthesis ||\r\n      asciiControl(code)\r\n    ) {\r\n      return nok(code)\r\n    }\r\n\r\n    effects.consume(code)\r\n    return code === codes.backslash ? rawEscape : raw\r\n  }\r\n\r\n  /**\r\n   * After `\\`, at special character.\r\n   *\r\n   * ```markdown\r\n   * > | a\\*a\r\n   *       ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function rawEscape(code) {\r\n    if (\r\n      code === codes.leftParenthesis ||\r\n      code === codes.rightParenthesis ||\r\n      code === codes.backslash\r\n    ) {\r\n      effects.consume(code)\r\n      return raw\r\n    }\r\n\r\n    return raw(code)\r\n  }\r\n}\r\n", "/**\r\n * @typedef {import('micromark-util-types').Effects} Effects\r\n * @typedef {import('micromark-util-types').State} State\r\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\r\n * @typedef {import('micromark-util-types').TokenType} TokenType\r\n */\r\n\r\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\r\nimport {codes, constants, types} from 'micromark-util-symbol'\r\nimport {ok as assert} from 'devlop'\r\n\r\n/**\r\n * Parse labels.\r\n *\r\n * > 👉 **Note**: labels in markdown are capped at 999 characters in the string.\r\n *\r\n * ###### Examples\r\n *\r\n * ```markdown\r\n * [a]\r\n * [a\r\n * b]\r\n * [a\\]b]\r\n * ```\r\n *\r\n * @this {TokenizeContext}\r\n *   Tokenize context.\r\n * @param {Effects} effects\r\n *   Context.\r\n * @param {State} ok\r\n *   State switched to when successful.\r\n * @param {State} nok\r\n *   State switched to when unsuccessful.\r\n * @param {TokenType} type\r\n *   Type of the whole label (`[a]`).\r\n * @param {TokenType} markerType\r\n *   Type for the markers (`[` and `]`).\r\n * @param {TokenType} stringType\r\n *   Type for the identifier (`a`).\r\n * @returns {State}\r\n *   Start state.\r\n */\r\n// eslint-disable-next-line max-params\r\nexport function factoryLabel(effects, ok, nok, type, markerType, stringType) {\r\n  const self = this\r\n  let size = 0\r\n  /** @type {boolean} */\r\n  let seen\r\n\r\n  return start\r\n\r\n  /**\r\n   * Start of label.\r\n   *\r\n   * ```markdown\r\n   * > | [a]\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function start(code) {\r\n    assert(code === codes.leftSquareBracket, 'expected `[`')\r\n    effects.enter(type)\r\n    effects.enter(markerType)\r\n    effects.consume(code)\r\n    effects.exit(markerType)\r\n    effects.enter(stringType)\r\n    return atBreak\r\n  }\r\n\r\n  /**\r\n   * In label, at something, before something else.\r\n   *\r\n   * ```markdown\r\n   * > | [a]\r\n   *      ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function atBreak(code) {\r\n    if (\r\n      size > constants.linkReferenceSizeMax ||\r\n      code === codes.eof ||\r\n      code === codes.leftSquareBracket ||\r\n      (code === codes.rightSquareBracket && !seen) ||\r\n      // To do: remove in the future once we’ve switched from\r\n      // `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\r\n      // which doesn’t need this.\r\n      // Hidden footnotes hook.\r\n      /* c8 ignore next 3 */\r\n      (code === codes.caret &&\r\n        !size &&\r\n        '_hiddenFootnoteSupport' in self.parser.constructs)\r\n    ) {\r\n      return nok(code)\r\n    }\r\n\r\n    if (code === codes.rightSquareBracket) {\r\n      effects.exit(stringType)\r\n      effects.enter(markerType)\r\n      effects.consume(code)\r\n      effects.exit(markerType)\r\n      effects.exit(type)\r\n      return ok\r\n    }\r\n\r\n    // To do: indent? Link chunks and EOLs together?\r\n    if (markdownLineEnding(code)) {\r\n      effects.enter(types.lineEnding)\r\n      effects.consume(code)\r\n      effects.exit(types.lineEnding)\r\n      return atBreak\r\n    }\r\n\r\n    effects.enter(types.chunkString, {contentType: constants.contentTypeString})\r\n    return labelInside(code)\r\n  }\r\n\r\n  /**\r\n   * In label, in text.\r\n   *\r\n   * ```markdown\r\n   * > | [a]\r\n   *      ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function labelInside(code) {\r\n    if (\r\n      code === codes.eof ||\r\n      code === codes.leftSquareBracket ||\r\n      code === codes.rightSquareBracket ||\r\n      markdownLineEnding(code) ||\r\n      size++ > constants.linkReferenceSizeMax\r\n    ) {\r\n      effects.exit(types.chunkString)\r\n      return atBreak(code)\r\n    }\r\n\r\n    effects.consume(code)\r\n    if (!seen) seen = !markdownSpace(code)\r\n    return code === codes.backslash ? labelEscape : labelInside\r\n  }\r\n\r\n  /**\r\n   * After `\\`, at a special character.\r\n   *\r\n   * ```markdown\r\n   * > | [a\\*a]\r\n   *        ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function labelEscape(code) {\r\n    if (\r\n      code === codes.leftSquareBracket ||\r\n      code === codes.backslash ||\r\n      code === codes.rightSquareBracket\r\n    ) {\r\n      effects.consume(code)\r\n      size++\r\n      return labelInside\r\n    }\r\n\r\n    return labelInside(code)\r\n  }\r\n}\r\n", "/**\r\n * @typedef {import('micromark-util-types').Code} Code\r\n * @typedef {import('micromark-util-types').Effects} Effects\r\n * @typedef {import('micromark-util-types').State} State\r\n * @typedef {import('micromark-util-types').TokenType} TokenType\r\n */\r\n\r\nimport {factorySpace} from 'micromark-factory-space'\r\nimport {markdownLineEnding} from 'micromark-util-character'\r\nimport {codes, constants, types} from 'micromark-util-symbol'\r\n\r\n/**\r\n * Parse titles.\r\n *\r\n * ###### Examples\r\n *\r\n * ```markdown\r\n * \"a\"\r\n * 'b'\r\n * (c)\r\n * \"a\r\n * b\"\r\n * 'a\r\n *     b'\r\n * (a\\)b)\r\n * ```\r\n *\r\n * @param {Effects} effects\r\n *   Context.\r\n * @param {State} ok\r\n *   State switched to when successful.\r\n * @param {State} nok\r\n *   State switched to when unsuccessful.\r\n * @param {TokenType} type\r\n *   Type of the whole title (`\"a\"`, `'b'`, `(c)`).\r\n * @param {TokenType} markerType\r\n *   Type for the markers (`\"`, `'`, `(`, and `)`).\r\n * @param {TokenType} stringType\r\n *   Type for the value (`a`).\r\n * @returns {State}\r\n *   Start state.\r\n */\r\n// eslint-disable-next-line max-params\r\nexport function factoryTitle(effects, ok, nok, type, markerType, stringType) {\r\n  /** @type {NonNullable<Code>} */\r\n  let marker\r\n\r\n  return start\r\n\r\n  /**\r\n   * Start of title.\r\n   *\r\n   * ```markdown\r\n   * > | \"a\"\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function start(code) {\r\n    if (\r\n      code === codes.quotationMark ||\r\n      code === codes.apostrophe ||\r\n      code === codes.leftParenthesis\r\n    ) {\r\n      effects.enter(type)\r\n      effects.enter(markerType)\r\n      effects.consume(code)\r\n      effects.exit(markerType)\r\n      marker = code === codes.leftParenthesis ? codes.rightParenthesis : code\r\n      return begin\r\n    }\r\n\r\n    return nok(code)\r\n  }\r\n\r\n  /**\r\n   * After opening marker.\r\n   *\r\n   * This is also used at the closing marker.\r\n   *\r\n   * ```markdown\r\n   * > | \"a\"\r\n   *      ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function begin(code) {\r\n    if (code === marker) {\r\n      effects.enter(markerType)\r\n      effects.consume(code)\r\n      effects.exit(markerType)\r\n      effects.exit(type)\r\n      return ok\r\n    }\r\n\r\n    effects.enter(stringType)\r\n    return atBreak(code)\r\n  }\r\n\r\n  /**\r\n   * At something, before something else.\r\n   *\r\n   * ```markdown\r\n   * > | \"a\"\r\n   *      ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function atBreak(code) {\r\n    if (code === marker) {\r\n      effects.exit(stringType)\r\n      return begin(marker)\r\n    }\r\n\r\n    if (code === codes.eof) {\r\n      return nok(code)\r\n    }\r\n\r\n    // Note: blank lines can’t exist in content.\r\n    if (markdownLineEnding(code)) {\r\n      // To do: use `space_or_tab_eol_with_options`, connect.\r\n      effects.enter(types.lineEnding)\r\n      effects.consume(code)\r\n      effects.exit(types.lineEnding)\r\n      return factorySpace(effects, atBreak, types.linePrefix)\r\n    }\r\n\r\n    effects.enter(types.chunkString, {contentType: constants.contentTypeString})\r\n    return inside(code)\r\n  }\r\n\r\n  /**\r\n   *\r\n   *\r\n   * @type {State}\r\n   */\r\n  function inside(code) {\r\n    if (code === marker || code === codes.eof || markdownLineEnding(code)) {\r\n      effects.exit(types.chunkString)\r\n      return atBreak(code)\r\n    }\r\n\r\n    effects.consume(code)\r\n    return code === codes.backslash ? escape : inside\r\n  }\r\n\r\n  /**\r\n   * After `\\`, at a special character.\r\n   *\r\n   * ```markdown\r\n   * > | \"a\\*b\"\r\n   *      ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function escape(code) {\r\n    if (code === marker || code === codes.backslash) {\r\n      effects.consume(code)\r\n      return inside\r\n    }\r\n\r\n    return inside(code)\r\n  }\r\n}\r\n", "import {values} from 'micromark-util-symbol'\r\n\r\n/**\r\n * Normalize an identifier (as found in references, definitions).\r\n *\r\n * Collapses markdown whitespace, trim, and then lower- and uppercase.\r\n *\r\n * Some characters are considered “uppercase”, such as U+03F4 (`ϴ`), but if their\r\n * lowercase counterpart (U+03B8 (`θ`)) is uppercased will result in a different\r\n * uppercase character (U+0398 (`Θ`)).\r\n * So, to get a canonical form, we perform both lower- and uppercase.\r\n *\r\n * Using uppercase last makes sure keys will never interact with default\r\n * prototypal values (such as `constructor`): nothing in the prototype of\r\n * `Object` is uppercase.\r\n *\r\n * @param {string} value\r\n *   Identifier to normalize.\r\n * @returns {string}\r\n *   Normalized identifier.\r\n */\r\nexport function normalizeIdentifier(value) {\r\n  return (\r\n    value\r\n      // Collapse markdown whitespace.\r\n      .replace(/[\\t\\n\\r ]+/g, values.space)\r\n      // Trim.\r\n      .replace(/^ | $/g, '')\r\n      // Some characters are considered “uppercase”, but if their lowercase\r\n      // counterpart is uppercased will result in a different uppercase\r\n      // character.\r\n      // Hence, to get that form, we perform both lower- and uppercase.\r\n      // Upper case makes sure keys will not interact with default prototypal\r\n      // methods: no method is uppercase.\r\n      .toLowerCase()\r\n      .toUpperCase()\r\n  )\r\n}\r\n", "/**\r\n * @typedef {import('micromark-util-types').Construct} Construct\r\n * @typedef {import('micromark-util-types').Event} Event\r\n * @typedef {import('micromark-util-types').Resolver} Resolver\r\n * @typedef {import('micromark-util-types').State} State\r\n * @typedef {import('micromark-util-types').Token} Token\r\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\r\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\r\n */\r\n\r\nimport {factoryDestination} from 'micromark-factory-destination'\r\nimport {factoryLabel} from 'micromark-factory-label'\r\nimport {factoryTitle} from 'micromark-factory-title'\r\nimport {factoryWhitespace} from 'micromark-factory-whitespace'\r\nimport {markdownLineEndingOrSpace} from 'micromark-util-character'\r\nimport {push, splice} from 'micromark-util-chunked'\r\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\r\nimport {resolveAll} from 'micromark-util-resolve-all'\r\nimport {codes, constants, types} from 'micromark-util-symbol'\r\nimport {ok as assert} from 'devlop'\r\n\r\n/** @type {Construct} */\r\nexport const labelEnd = {\r\n  name: 'labelEnd',\r\n  tokenize: tokenizeLabelEnd,\r\n  resolveTo: resolveToLabelEnd,\r\n  resolveAll: resolveAllLabelEnd\r\n}\r\n\r\n/** @type {Construct} */\r\nconst resourceConstruct = {tokenize: tokenizeResource}\r\n/** @type {Construct} */\r\nconst referenceFullConstruct = {tokenize: tokenizeReferenceFull}\r\n/** @type {Construct} */\r\nconst referenceCollapsedConstruct = {tokenize: tokenizeReferenceCollapsed}\r\n\r\n/** @type {Resolver} */\r\nfunction resolveAllLabelEnd(events) {\r\n  let index = -1\r\n\r\n  while (++index < events.length) {\r\n    const token = events[index][1]\r\n\r\n    if (\r\n      token.type === types.labelImage ||\r\n      token.type === types.labelLink ||\r\n      token.type === types.labelEnd\r\n    ) {\r\n      // Remove the marker.\r\n      events.splice(index + 1, token.type === types.labelImage ? 4 : 2)\r\n      token.type = types.data\r\n      index++\r\n    }\r\n  }\r\n\r\n  return events\r\n}\r\n\r\n/** @type {Resolver} */\r\nfunction resolveToLabelEnd(events, context) {\r\n  let index = events.length\r\n  let offset = 0\r\n  /** @type {Token} */\r\n  let token\r\n  /** @type {number | undefined} */\r\n  let open\r\n  /** @type {number | undefined} */\r\n  let close\r\n  /** @type {Array<Event>} */\r\n  let media\r\n\r\n  // Find an opening.\r\n  while (index--) {\r\n    token = events[index][1]\r\n\r\n    if (open) {\r\n      // If we see another link, or inactive link label, we’ve been here before.\r\n      if (\r\n        token.type === types.link ||\r\n        (token.type === types.labelLink && token._inactive)\r\n      ) {\r\n        break\r\n      }\r\n\r\n      // Mark other link openings as inactive, as we can’t have links in\r\n      // links.\r\n      if (events[index][0] === 'enter' && token.type === types.labelLink) {\r\n        token._inactive = true\r\n      }\r\n    } else if (close) {\r\n      if (\r\n        events[index][0] === 'enter' &&\r\n        (token.type === types.labelImage || token.type === types.labelLink) &&\r\n        !token._balanced\r\n      ) {\r\n        open = index\r\n\r\n        if (token.type !== types.labelLink) {\r\n          offset = 2\r\n          break\r\n        }\r\n      }\r\n    } else if (token.type === types.labelEnd) {\r\n      close = index\r\n    }\r\n  }\r\n\r\n  assert(open !== undefined, '`open` is supposed to be found')\r\n  assert(close !== undefined, '`close` is supposed to be found')\r\n\r\n  const group = {\r\n    type: events[open][1].type === types.labelLink ? types.link : types.image,\r\n    start: Object.assign({}, events[open][1].start),\r\n    end: Object.assign({}, events[events.length - 1][1].end)\r\n  }\r\n\r\n  const label = {\r\n    type: types.label,\r\n    start: Object.assign({}, events[open][1].start),\r\n    end: Object.assign({}, events[close][1].end)\r\n  }\r\n\r\n  const text = {\r\n    type: types.labelText,\r\n    start: Object.assign({}, events[open + offset + 2][1].end),\r\n    end: Object.assign({}, events[close - 2][1].start)\r\n  }\r\n\r\n  media = [\r\n    ['enter', group, context],\r\n    ['enter', label, context]\r\n  ]\r\n\r\n  // Opening marker.\r\n  media = push(media, events.slice(open + 1, open + offset + 3))\r\n\r\n  // Text open.\r\n  media = push(media, [['enter', text, context]])\r\n\r\n  // Always populated by defaults.\r\n  assert(\r\n    context.parser.constructs.insideSpan.null,\r\n    'expected `insideSpan.null` to be populated'\r\n  )\r\n  // Between.\r\n  media = push(\r\n    media,\r\n    resolveAll(\r\n      context.parser.constructs.insideSpan.null,\r\n      events.slice(open + offset + 4, close - 3),\r\n      context\r\n    )\r\n  )\r\n\r\n  // Text close, marker close, label close.\r\n  media = push(media, [\r\n    ['exit', text, context],\r\n    events[close - 2],\r\n    events[close - 1],\r\n    ['exit', label, context]\r\n  ])\r\n\r\n  // Reference, resource, or so.\r\n  media = push(media, events.slice(close + 1))\r\n\r\n  // Media close.\r\n  media = push(media, [['exit', group, context]])\r\n\r\n  splice(events, open, events.length, media)\r\n\r\n  return events\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeLabelEnd(effects, ok, nok) {\r\n  const self = this\r\n  let index = self.events.length\r\n  /** @type {Token} */\r\n  let labelStart\r\n  /** @type {boolean} */\r\n  let defined\r\n\r\n  // Find an opening.\r\n  while (index--) {\r\n    if (\r\n      (self.events[index][1].type === types.labelImage ||\r\n        self.events[index][1].type === types.labelLink) &&\r\n      !self.events[index][1]._balanced\r\n    ) {\r\n      labelStart = self.events[index][1]\r\n      break\r\n    }\r\n  }\r\n\r\n  return start\r\n\r\n  /**\r\n   * Start of label end.\r\n   *\r\n   * ```markdown\r\n   * > | [a](b) c\r\n   *       ^\r\n   * > | [a][b] c\r\n   *       ^\r\n   * > | [a][] b\r\n   *       ^\r\n   * > | [a] b\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function start(code) {\r\n    assert(code === codes.rightSquareBracket, 'expected `]`')\r\n\r\n    // If there is not an okay opening.\r\n    if (!labelStart) {\r\n      return nok(code)\r\n    }\r\n\r\n    // If the corresponding label (link) start is marked as inactive,\r\n    // it means we’d be wrapping a link, like this:\r\n    //\r\n    // ```markdown\r\n    // > | a [b [c](d) e](f) g.\r\n    //                  ^\r\n    // ```\r\n    //\r\n    // We can’t have that, so it’s just balanced brackets.\r\n    if (labelStart._inactive) {\r\n      return labelEndNok(code)\r\n    }\r\n\r\n    defined = self.parser.defined.includes(\r\n      normalizeIdentifier(\r\n        self.sliceSerialize({start: labelStart.end, end: self.now()})\r\n      )\r\n    )\r\n    effects.enter(types.labelEnd)\r\n    effects.enter(types.labelMarker)\r\n    effects.consume(code)\r\n    effects.exit(types.labelMarker)\r\n    effects.exit(types.labelEnd)\r\n    return after\r\n  }\r\n\r\n  /**\r\n   * After `]`.\r\n   *\r\n   * ```markdown\r\n   * > | [a](b) c\r\n   *       ^\r\n   * > | [a][b] c\r\n   *       ^\r\n   * > | [a][] b\r\n   *       ^\r\n   * > | [a] b\r\n   *       ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function after(code) {\r\n    // Note: `markdown-rs` also parses GFM footnotes here, which for us is in\r\n    // an extension.\r\n\r\n    // Resource (`[asd](fgh)`)?\r\n    if (code === codes.leftParenthesis) {\r\n      return effects.attempt(\r\n        resourceConstruct,\r\n        labelEndOk,\r\n        defined ? labelEndOk : labelEndNok\r\n      )(code)\r\n    }\r\n\r\n    // Full (`[asd][fgh]`) or collapsed (`[asd][]`) reference?\r\n    if (code === codes.leftSquareBracket) {\r\n      return effects.attempt(\r\n        referenceFullConstruct,\r\n        labelEndOk,\r\n        defined ? referenceNotFull : labelEndNok\r\n      )(code)\r\n    }\r\n\r\n    // Shortcut (`[asd]`) reference?\r\n    return defined ? labelEndOk(code) : labelEndNok(code)\r\n  }\r\n\r\n  /**\r\n   * After `]`, at `[`, but not at a full reference.\r\n   *\r\n   * > 👉 **Note**: we only get here if the label is defined.\r\n   *\r\n   * ```markdown\r\n   * > | [a][] b\r\n   *        ^\r\n   * > | [a] b\r\n   *        ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function referenceNotFull(code) {\r\n    return effects.attempt(\r\n      referenceCollapsedConstruct,\r\n      labelEndOk,\r\n      labelEndNok\r\n    )(code)\r\n  }\r\n\r\n  /**\r\n   * Done, we found something.\r\n   *\r\n   * ```markdown\r\n   * > | [a](b) c\r\n   *           ^\r\n   * > | [a][b] c\r\n   *           ^\r\n   * > | [a][] b\r\n   *          ^\r\n   * > | [a] b\r\n   *        ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function labelEndOk(code) {\r\n    // Note: `markdown-rs` does a bunch of stuff here.\r\n    return ok(code)\r\n  }\r\n\r\n  /**\r\n   * Done, it’s nothing.\r\n   *\r\n   * There was an okay opening, but we didn’t match anything.\r\n   *\r\n   * ```markdown\r\n   * > | [a](b c\r\n   *        ^\r\n   * > | [a][b c\r\n   *        ^\r\n   * > | [a] b\r\n   *        ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function labelEndNok(code) {\r\n    labelStart._balanced = true\r\n    return nok(code)\r\n  }\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeResource(effects, ok, nok) {\r\n  return resourceStart\r\n\r\n  /**\r\n   * At a resource.\r\n   *\r\n   * ```markdown\r\n   * > | [a](b) c\r\n   *        ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function resourceStart(code) {\r\n    assert(code === codes.leftParenthesis, 'expected left paren')\r\n    effects.enter(types.resource)\r\n    effects.enter(types.resourceMarker)\r\n    effects.consume(code)\r\n    effects.exit(types.resourceMarker)\r\n    return resourceBefore\r\n  }\r\n\r\n  /**\r\n   * In resource, after `(`, at optional whitespace.\r\n   *\r\n   * ```markdown\r\n   * > | [a](b) c\r\n   *         ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function resourceBefore(code) {\r\n    return markdownLineEndingOrSpace(code)\r\n      ? factoryWhitespace(effects, resourceOpen)(code)\r\n      : resourceOpen(code)\r\n  }\r\n\r\n  /**\r\n   * In resource, after optional whitespace, at `)` or a destination.\r\n   *\r\n   * ```markdown\r\n   * > | [a](b) c\r\n   *         ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function resourceOpen(code) {\r\n    if (code === codes.rightParenthesis) {\r\n      return resourceEnd(code)\r\n    }\r\n\r\n    return factoryDestination(\r\n      effects,\r\n      resourceDestinationAfter,\r\n      resourceDestinationMissing,\r\n      types.resourceDestination,\r\n      types.resourceDestinationLiteral,\r\n      types.resourceDestinationLiteralMarker,\r\n      types.resourceDestinationRaw,\r\n      types.resourceDestinationString,\r\n      constants.linkResourceDestinationBalanceMax\r\n    )(code)\r\n  }\r\n\r\n  /**\r\n   * In resource, after destination, at optional whitespace.\r\n   *\r\n   * ```markdown\r\n   * > | [a](b) c\r\n   *          ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function resourceDestinationAfter(code) {\r\n    return markdownLineEndingOrSpace(code)\r\n      ? factoryWhitespace(effects, resourceBetween)(code)\r\n      : resourceEnd(code)\r\n  }\r\n\r\n  /**\r\n   * At invalid destination.\r\n   *\r\n   * ```markdown\r\n   * > | [a](<<) b\r\n   *         ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function resourceDestinationMissing(code) {\r\n    return nok(code)\r\n  }\r\n\r\n  /**\r\n   * In resource, after destination and whitespace, at `(` or title.\r\n   *\r\n   * ```markdown\r\n   * > | [a](b ) c\r\n   *           ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function resourceBetween(code) {\r\n    if (\r\n      code === codes.quotationMark ||\r\n      code === codes.apostrophe ||\r\n      code === codes.leftParenthesis\r\n    ) {\r\n      return factoryTitle(\r\n        effects,\r\n        resourceTitleAfter,\r\n        nok,\r\n        types.resourceTitle,\r\n        types.resourceTitleMarker,\r\n        types.resourceTitleString\r\n      )(code)\r\n    }\r\n\r\n    return resourceEnd(code)\r\n  }\r\n\r\n  /**\r\n   * In resource, after title, at optional whitespace.\r\n   *\r\n   * ```markdown\r\n   * > | [a](b \"c\") d\r\n   *              ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function resourceTitleAfter(code) {\r\n    return markdownLineEndingOrSpace(code)\r\n      ? factoryWhitespace(effects, resourceEnd)(code)\r\n      : resourceEnd(code)\r\n  }\r\n\r\n  /**\r\n   * In resource, at `)`.\r\n   *\r\n   * ```markdown\r\n   * > | [a](b) d\r\n   *          ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function resourceEnd(code) {\r\n    if (code === codes.rightParenthesis) {\r\n      effects.enter(types.resourceMarker)\r\n      effects.consume(code)\r\n      effects.exit(types.resourceMarker)\r\n      effects.exit(types.resource)\r\n      return ok\r\n    }\r\n\r\n    return nok(code)\r\n  }\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeReferenceFull(effects, ok, nok) {\r\n  const self = this\r\n\r\n  return referenceFull\r\n\r\n  /**\r\n   * In a reference (full), at the `[`.\r\n   *\r\n   * ```markdown\r\n   * > | [a][b] d\r\n   *        ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function referenceFull(code) {\r\n    assert(code === codes.leftSquareBracket, 'expected left bracket')\r\n    return factoryLabel.call(\r\n      self,\r\n      effects,\r\n      referenceFullAfter,\r\n      referenceFullMissing,\r\n      types.reference,\r\n      types.referenceMarker,\r\n      types.referenceString\r\n    )(code)\r\n  }\r\n\r\n  /**\r\n   * In a reference (full), after `]`.\r\n   *\r\n   * ```markdown\r\n   * > | [a][b] d\r\n   *          ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function referenceFullAfter(code) {\r\n    return self.parser.defined.includes(\r\n      normalizeIdentifier(\r\n        self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)\r\n      )\r\n    )\r\n      ? ok(code)\r\n      : nok(code)\r\n  }\r\n\r\n  /**\r\n   * In reference (full) that was missing.\r\n   *\r\n   * ```markdown\r\n   * > | [a][b d\r\n   *        ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function referenceFullMissing(code) {\r\n    return nok(code)\r\n  }\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeReferenceCollapsed(effects, ok, nok) {\r\n  return referenceCollapsedStart\r\n\r\n  /**\r\n   * In reference (collapsed), at `[`.\r\n   *\r\n   * > 👉 **Note**: we only get here if the label is defined.\r\n   *\r\n   * ```markdown\r\n   * > | [a][] d\r\n   *        ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function referenceCollapsedStart(code) {\r\n    // We only attempt a collapsed label if there’s a `[`.\r\n    assert(code === codes.leftSquareBracket, 'expected left bracket')\r\n    effects.enter(types.reference)\r\n    effects.enter(types.referenceMarker)\r\n    effects.consume(code)\r\n    effects.exit(types.referenceMarker)\r\n    return referenceCollapsedOpen\r\n  }\r\n\r\n  /**\r\n   * In reference (collapsed), at `]`.\r\n   *\r\n   * > 👉 **Note**: we only get here if the label is defined.\r\n   *\r\n   * ```markdown\r\n   * > | [a][] d\r\n   *         ^\r\n   * ```\r\n   *\r\n   *  @type {State}\r\n   */\r\n  function referenceCollapsedOpen(code) {\r\n    if (code === codes.rightSquareBracket) {\r\n      effects.enter(types.referenceMarker)\r\n      effects.consume(code)\r\n      effects.exit(types.referenceMarker)\r\n      effects.exit(types.reference)\r\n      return ok\r\n    }\r\n\r\n    return nok(code)\r\n  }\r\n}\r\n", "/**\r\n * @typedef {import('micromark-util-types').Construct} Construct\r\n * @typedef {import('micromark-util-types').State} State\r\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\r\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\r\n */\r\n\r\nimport {codes, types} from 'micromark-util-symbol'\r\nimport {ok as assert} from 'devlop'\r\nimport {labelEnd} from './label-end.js'\r\n\r\n/** @type {Construct} */\r\nexport const labelStartImage = {\r\n  name: 'labelStartImage',\r\n  tokenize: tokenizeLabelStartImage,\r\n  resolveAll: labelEnd.resolveAll\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeLabelStartImage(effects, ok, nok) {\r\n  const self = this\r\n\r\n  return start\r\n\r\n  /**\r\n   * Start of label (image) start.\r\n   *\r\n   * ```markdown\r\n   * > | a ![b] c\r\n   *       ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function start(code) {\r\n    assert(code === codes.exclamationMark, 'expected `!`')\r\n    effects.enter(types.labelImage)\r\n    effects.enter(types.labelImageMarker)\r\n    effects.consume(code)\r\n    effects.exit(types.labelImageMarker)\r\n    return open\r\n  }\r\n\r\n  /**\r\n   * After `!`, at `[`.\r\n   *\r\n   * ```markdown\r\n   * > | a ![b] c\r\n   *        ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function open(code) {\r\n    if (code === codes.leftSquareBracket) {\r\n      effects.enter(types.labelMarker)\r\n      effects.consume(code)\r\n      effects.exit(types.labelMarker)\r\n      effects.exit(types.labelImage)\r\n      return after\r\n    }\r\n\r\n    return nok(code)\r\n  }\r\n\r\n  /**\r\n   * After `![`.\r\n   *\r\n   * ```markdown\r\n   * > | a ![b] c\r\n   *         ^\r\n   * ```\r\n   *\r\n   * This is needed in because, when GFM footnotes are enabled, images never\r\n   * form when started with a `^`.\r\n   * Instead, links form:\r\n   *\r\n   * ```markdown\r\n   * ![^a](b)\r\n   *\r\n   * ![^a][b]\r\n   *\r\n   * [b]: c\r\n   * ```\r\n   *\r\n   * ```html\r\n   * <p>!<a href=\\\"b\\\">^a</a></p>\r\n   * <p>!<a href=\\\"c\\\">^a</a></p>\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function after(code) {\r\n    // To do: use a new field to do this, this is still needed for\r\n    // `micromark-extension-gfm-footnote`, but the `label-start-link`\r\n    // behavior isn’t.\r\n    // Hidden footnotes hook.\r\n    /* c8 ignore next 3 */\r\n    return code === codes.caret &&\r\n      '_hiddenFootnoteSupport' in self.parser.constructs\r\n      ? nok(code)\r\n      : ok(code)\r\n  }\r\n}\r\n", "/**\r\n * @typedef {import('micromark-util-types').Construct} Construct\r\n * @typedef {import('micromark-util-types').State} State\r\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\r\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\r\n */\r\n\r\nimport {codes, types} from 'micromark-util-symbol'\r\nimport {ok as assert} from 'devlop'\r\nimport {labelEnd} from './label-end.js'\r\n\r\n/** @type {Construct} */\r\nexport const labelStartLink = {\r\n  name: 'labelStartLink',\r\n  tokenize: tokenizeLabelStartLink,\r\n  resolveAll: labelEnd.resolveAll\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeLabelStartLink(effects, ok, nok) {\r\n  const self = this\r\n\r\n  return start\r\n\r\n  /**\r\n   * Start of label (link) start.\r\n   *\r\n   * ```markdown\r\n   * > | a [b] c\r\n   *       ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function start(code) {\r\n    assert(code === codes.leftSquareBracket, 'expected `[`')\r\n    effects.enter(types.labelLink)\r\n    effects.enter(types.labelMarker)\r\n    effects.consume(code)\r\n    effects.exit(types.labelMarker)\r\n    effects.exit(types.labelLink)\r\n    return after\r\n  }\r\n\r\n  /** @type {State} */\r\n  function after(code) {\r\n    // To do: this isn’t needed in `micromark-extension-gfm-footnote`,\r\n    // remove.\r\n    // Hidden footnotes hook.\r\n    /* c8 ignore next 3 */\r\n    return code === codes.caret &&\r\n      '_hiddenFootnoteSupport' in self.parser.constructs\r\n      ? nok(code)\r\n      : ok(code)\r\n  }\r\n}\r\n"],
  "mappings": "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",
  "names": ["node", "list", "node", "node", "exit", "value", "map", "node", "node", "values", "node", "node", "exit", "subexit", "value", "node", "node", "node", "node", "node", "node", "value", "node", "text", "node", "node", "map", "node", "node", "node", "node", "characterReference", "ok", "code", "ok", "code", "effects", "nok", "start", "ok", "code", "list", "code", "ok", "code", "ok", "code", "ok", "code", "ok", "code", "text", "ok", "code", "ok", "code", "ok", "code"]
}
