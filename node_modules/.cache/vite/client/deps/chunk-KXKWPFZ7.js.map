{
  "version": 3,
  "sources": ["../../../../devlop/lib/development.js"],
  "sourcesContent": ["import {dequal} from 'dequal'\r\n\r\n/**\r\n * @type {Set<string>}\r\n */\r\nconst codesWarned = new Set()\r\n\r\nclass AssertionError extends Error {\r\n  name = /** @type {const} */ ('Assertion')\r\n  code = /** @type {const} */ ('ERR_ASSERTION')\r\n\r\n  /**\r\n   * Create an assertion error.\r\n   *\r\n   * @param {string} message\r\n   *   Message explaining error.\r\n   * @param {unknown} actual\r\n   *   Value.\r\n   * @param {unknown} expected\r\n   *   Baseline.\r\n   * @param {string} operator\r\n   *   Name of equality operation.\r\n   * @param {boolean} generated\r\n   *   Whether `message` is a custom message or not\r\n   * @returns\r\n   *   Instance.\r\n   */\r\n  // eslint-disable-next-line max-params\r\n  constructor(message, actual, expected, operator, generated) {\r\n    super(message)\r\n\r\n    if (Error.captureStackTrace) {\r\n      Error.captureStackTrace(this, this.constructor)\r\n    }\r\n\r\n    /**\r\n     * @type {unknown}\r\n     */\r\n    this.actual = actual\r\n\r\n    /**\r\n     * @type {unknown}\r\n     */\r\n    this.expected = expected\r\n\r\n    /**\r\n     * @type {boolean}\r\n     */\r\n    this.generated = generated\r\n\r\n    /**\r\n     * @type {string}\r\n     */\r\n    this.operator = operator\r\n  }\r\n}\r\n\r\nclass DeprecationError extends Error {\r\n  name = /** @type {const} */ ('DeprecationWarning')\r\n\r\n  /**\r\n   * Create a deprecation message.\r\n   *\r\n   * @param {string} message\r\n   *   Message explaining deprecation.\r\n   * @param {string | undefined} code\r\n   *   Deprecation identifier; deprecation messages will be generated only once per code.\r\n   * @returns\r\n   *   Instance.\r\n   */\r\n  constructor(message, code) {\r\n    super(message)\r\n\r\n    /**\r\n     * @type {string | undefined}\r\n     */\r\n    this.code = code\r\n  }\r\n}\r\n\r\n/**\r\n * Wrap a function or class to show a deprecation message when first called.\r\n *\r\n * > ðŸ‘‰ **Important**: only shows a message when the `development` condition is\r\n * > used, does nothing in production.\r\n *\r\n * When the resulting wrapped `fn` is called, emits a warning once to\r\n * `console.error` (`stderr`).\r\n * If a code is given, one warning message will be emitted in total per code.\r\n *\r\n * @template {Function} T\r\n *   Function or class kind.\r\n * @param {T} fn\r\n *   Function or class.\r\n * @param {string} message\r\n *   Message explaining deprecation.\r\n * @param {string | null | undefined} [code]\r\n *   Deprecation identifier (optional); deprecation messages will be generated\r\n *   only once per code.\r\n * @returns {T}\r\n *   Wrapped `fn`.\r\n */\r\nexport function deprecate(fn, message, code) {\r\n  let warned = false\r\n\r\n  // The wrapper will keep the same prototype as fn to maintain prototype chain\r\n  Object.setPrototypeOf(deprecated, fn)\r\n\r\n  // @ts-expect-error: itâ€™s perfect, typescriptâ€¦\r\n  return deprecated\r\n\r\n  /**\r\n   * @this {unknown}\r\n   * @param  {...Array<unknown>} args\r\n   * @returns {unknown}\r\n   */\r\n  function deprecated(...args) {\r\n    if (!warned) {\r\n      warned = true\r\n\r\n      if (typeof code === 'string' && codesWarned.has(code)) {\r\n        // Empty.\r\n      } else {\r\n        console.error(new DeprecationError(message, code || undefined))\r\n\r\n        if (typeof code === 'string') codesWarned.add(code)\r\n      }\r\n    }\r\n\r\n    return new.target\r\n      ? Reflect.construct(fn, args, new.target)\r\n      : Reflect.apply(fn, this, args)\r\n  }\r\n}\r\n\r\n/**\r\n * Assert deep strict equivalence.\r\n *\r\n * > ðŸ‘‰ **Important**: only asserts when the `development` condition is used,\r\n * > does nothing in production.\r\n *\r\n * @template {unknown} T\r\n *   Expected kind.\r\n * @param {unknown} actual\r\n *   Value.\r\n * @param {T} expected\r\n *   Baseline.\r\n * @param {Error | string | null | undefined} [message]\r\n *   Message for assertion error (default: `'Expected values to be deeply equal'`).\r\n * @returns {asserts actual is T}\r\n *   Nothing; throws when `actual` is not deep strict equal to `expected`.\r\n * @throws {AssertionError}\r\n *   Throws when `actual` is not deep strict equal to `expected`.\r\n */\r\nexport function equal(actual, expected, message) {\r\n  assert(\r\n    dequal(actual, expected),\r\n    actual,\r\n    expected,\r\n    'equal',\r\n    'Expected values to be deeply equal',\r\n    message\r\n  )\r\n}\r\n\r\n/**\r\n * Assert if `value` is truthy.\r\n *\r\n * > ðŸ‘‰ **Important**: only asserts when the `development` condition is used,\r\n * > does nothing in production.\r\n *\r\n * @param {unknown} value\r\n *   Value to assert.\r\n * @param {Error | string | null | undefined} [message]\r\n *   Message for assertion error (default: `'Expected value to be truthy'`).\r\n * @returns {asserts value}\r\n *   Nothing; throws when `value` is falsey.\r\n * @throws {AssertionError}\r\n *   Throws when `value` is falsey.\r\n */\r\nexport function ok(value, message) {\r\n  assert(\r\n    Boolean(value),\r\n    false,\r\n    true,\r\n    'ok',\r\n    'Expected value to be truthy',\r\n    message\r\n  )\r\n}\r\n\r\n/**\r\n * Assert that a code path never happens.\r\n *\r\n * > ðŸ‘‰ **Important**: only asserts when the `development` condition is used,\r\n * > does nothing in production.\r\n *\r\n * @param {Error | string | null | undefined} [message]\r\n *   Message for assertion error (default: `'Unreachable'`).\r\n * @returns {never}\r\n *   Nothing; always throws.\r\n * @throws {AssertionError}\r\n *   Throws when `value` is falsey.\r\n */\r\nexport function unreachable(message) {\r\n  assert(false, false, true, 'ok', 'Unreachable', message)\r\n}\r\n\r\n/**\r\n * @param {boolean} bool\r\n *   Whether to skip this operation.\r\n * @param {unknown} actual\r\n *   Actual value.\r\n * @param {unknown} expected\r\n *   Expected value.\r\n * @param {string} operator\r\n *   Operator.\r\n * @param {string} defaultMessage\r\n *   Default message for operation.\r\n * @param {Error | string | null | undefined} userMessage\r\n *   User-provided message.\r\n * @returns {asserts bool}\r\n *   Nothing; throws when falsey.\r\n */\r\n// eslint-disable-next-line max-params\r\nfunction assert(bool, actual, expected, operator, defaultMessage, userMessage) {\r\n  if (!bool) {\r\n    throw userMessage instanceof Error\r\n      ? userMessage\r\n      : new AssertionError(\r\n          userMessage || defaultMessage,\r\n          actual,\r\n          expected,\r\n          operator,\r\n          !userMessage\r\n        )\r\n  }\r\n}\r\n"],
  "mappings": ";;;;;AAOA,IAAM,iBAAN,cAA6B,MAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAqBjC,YAAY,SAAS,QAAQ,UAAU,UAAU,WAAW;AAC1D,UAAM,OAAO;AArBf;AAAA;AAAA;AAAA;AAAA,MAA6B;AAAA;AAC7B;AAAA;AAAA;AAAA;AAAA,MAA6B;AAAA;AAsB3B,QAAI,MAAM,mBAAmB;AAC3B,YAAM,kBAAkB,MAAM,KAAK,WAAW;AAAA,IAChD;AAKA,SAAK,SAAS;AAKd,SAAK,WAAW;AAKhB,SAAK,YAAY;AAKjB,SAAK,WAAW;AAAA,EAClB;AACF;AA6HO,SAAS,GAAG,OAAO,SAAS;AACjC;AAAA,IACE,QAAQ,KAAK;AAAA,IACb;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF;AACF;AAoCA,SAAS,OAAO,MAAM,QAAQ,UAAU,UAAU,gBAAgB,aAAa;AAC7E,MAAI,CAAC,MAAM;AACT,UAAM,uBAAuB,QACzB,cACA,IAAI;AAAA,MACF,eAAe;AAAA,MACf;AAAA,MACA;AAAA,MACA;AAAA,MACA,CAAC;AAAA,IACH;AAAA,EACN;AACF;",
  "names": []
}
