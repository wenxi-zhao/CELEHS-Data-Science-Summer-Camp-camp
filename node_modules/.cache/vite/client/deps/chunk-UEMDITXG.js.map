{
  "version": 3,
  "sources": ["../../../../micromark-util-sanitize-uri/dev/index.js"],
  "sourcesContent": ["import {asciiAlphanumeric} from 'micromark-util-character'\r\nimport {encode} from 'micromark-util-encode'\r\nimport {codes, values} from 'micromark-util-symbol'\r\n\r\n/**\r\n * Make a value safe for injection as a URL.\r\n *\r\n * This encodes unsafe characters with percent-encoding and skips already\r\n * encoded sequences (see `normalizeUri`).\r\n * Further unsafe characters are encoded as character references (see\r\n * `micromark-util-encode`).\r\n *\r\n * A regex of allowed protocols can be given, in which case the URL is\r\n * sanitized.\r\n * For example, `/^(https?|ircs?|mailto|xmpp)$/i` can be used for `a[href]`, or\r\n * `/^https?$/i` for `img[src]` (this is what `github.com` allows).\r\n * If the URL includes an unknown protocol (one not matched by `protocol`, such\r\n * as a dangerous example, `javascript:`), the value is ignored.\r\n *\r\n * @param {string | null | undefined} url\r\n *   URI to sanitize.\r\n * @param {RegExp | null | undefined} [protocol]\r\n *   Allowed protocols.\r\n * @returns {string}\r\n *   Sanitized URI.\r\n */\r\nexport function sanitizeUri(url, protocol) {\r\n  const value = encode(normalizeUri(url || ''))\r\n\r\n  if (!protocol) {\r\n    return value\r\n  }\r\n\r\n  const colon = value.indexOf(':')\r\n  const questionMark = value.indexOf('?')\r\n  const numberSign = value.indexOf('#')\r\n  const slash = value.indexOf('/')\r\n\r\n  if (\r\n    // If there is no protocol, it’s relative.\r\n    colon < 0 ||\r\n    // If the first colon is after a `?`, `#`, or `/`, it’s not a protocol.\r\n    (slash > -1 && colon > slash) ||\r\n    (questionMark > -1 && colon > questionMark) ||\r\n    (numberSign > -1 && colon > numberSign) ||\r\n    // It is a protocol, it should be allowed.\r\n    protocol.test(value.slice(0, colon))\r\n  ) {\r\n    return value\r\n  }\r\n\r\n  return ''\r\n}\r\n\r\n/**\r\n * Normalize a URL.\r\n *\r\n * Encode unsafe characters with percent-encoding, skipping already encoded\r\n * sequences.\r\n *\r\n * @param {string} value\r\n *   URI to normalize.\r\n * @returns {string}\r\n *   Normalized URI.\r\n */\r\nexport function normalizeUri(value) {\r\n  /** @type {Array<string>} */\r\n  const result = []\r\n  let index = -1\r\n  let start = 0\r\n  let skip = 0\r\n\r\n  while (++index < value.length) {\r\n    const code = value.charCodeAt(index)\r\n    /** @type {string} */\r\n    let replace = ''\r\n\r\n    // A correct percent encoded value.\r\n    if (\r\n      code === codes.percentSign &&\r\n      asciiAlphanumeric(value.charCodeAt(index + 1)) &&\r\n      asciiAlphanumeric(value.charCodeAt(index + 2))\r\n    ) {\r\n      skip = 2\r\n    }\r\n    // ASCII.\r\n    else if (code < 128) {\r\n      if (!/[!#$&-;=?-Z_a-z~]/.test(String.fromCharCode(code))) {\r\n        replace = String.fromCharCode(code)\r\n      }\r\n    }\r\n    // Astral.\r\n    else if (code > 55_295 && code < 57_344) {\r\n      const next = value.charCodeAt(index + 1)\r\n\r\n      // A correct surrogate pair.\r\n      if (code < 56_320 && next > 56_319 && next < 57_344) {\r\n        replace = String.fromCharCode(code, next)\r\n        skip = 1\r\n      }\r\n      // Lone surrogate.\r\n      else {\r\n        replace = values.replacementCharacter\r\n      }\r\n    }\r\n    // Unicode.\r\n    else {\r\n      replace = String.fromCharCode(code)\r\n    }\r\n\r\n    if (replace) {\r\n      result.push(value.slice(start, index), encodeURIComponent(replace))\r\n      start = index + skip + 1\r\n      replace = ''\r\n    }\r\n\r\n    if (skip) {\r\n      index += skip\r\n      skip = 0\r\n    }\r\n  }\r\n\r\n  return result.join('') + value.slice(start)\r\n}\r\n"],
  "mappings": ";;;;;;;AAiEO,SAAS,aAAa,OAAO;AAElC,QAAM,SAAS,CAAC;AAChB,MAAI,QAAQ;AACZ,MAAI,QAAQ;AACZ,MAAI,OAAO;AAEX,SAAO,EAAE,QAAQ,MAAM,QAAQ;AAC7B,UAAM,OAAO,MAAM,WAAW,KAAK;AAEnC,QAAI,UAAU;AAGd,QACE,SAAS,MAAM,eACf,kBAAkB,MAAM,WAAW,QAAQ,CAAC,CAAC,KAC7C,kBAAkB,MAAM,WAAW,QAAQ,CAAC,CAAC,GAC7C;AACA,aAAO;AAAA,IACT,WAES,OAAO,KAAK;AACnB,UAAI,CAAC,oBAAoB,KAAK,OAAO,aAAa,IAAI,CAAC,GAAG;AACxD,kBAAU,OAAO,aAAa,IAAI;AAAA,MACpC;AAAA,IACF,WAES,OAAO,SAAU,OAAO,OAAQ;AACvC,YAAM,OAAO,MAAM,WAAW,QAAQ,CAAC;AAGvC,UAAI,OAAO,SAAU,OAAO,SAAU,OAAO,OAAQ;AACnD,kBAAU,OAAO,aAAa,MAAM,IAAI;AACxC,eAAO;AAAA,MACT,OAEK;AACH,kBAAU,OAAO;AAAA,MACnB;AAAA,IACF,OAEK;AACH,gBAAU,OAAO,aAAa,IAAI;AAAA,IACpC;AAEA,QAAI,SAAS;AACX,aAAO,KAAK,MAAM,MAAM,OAAO,KAAK,GAAG,mBAAmB,OAAO,CAAC;AAClE,cAAQ,QAAQ,OAAO;AACvB,gBAAU;AAAA,IACZ;AAEA,QAAI,MAAM;AACR,eAAS;AACT,aAAO;AAAA,IACT;AAAA,EACF;AAEA,SAAO,OAAO,KAAK,EAAE,IAAI,MAAM,MAAM,KAAK;AAC5C;",
  "names": []
}
